// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/tx_channel.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/ibc-go/v4/modules/core/04-channel/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChannelOpenInitRequest struct {
	Request *types.MsgChannelOpenInit `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                 `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ChannelOpenInitRequest) Reset()         { *m = ChannelOpenInitRequest{} }
func (m *ChannelOpenInitRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenInitRequest) ProtoMessage()    {}
func (*ChannelOpenInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{0}
}
func (m *ChannelOpenInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenInitRequest.Merge(m, src)
}
func (m *ChannelOpenInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenInitRequest proto.InternalMessageInfo

func (m *ChannelOpenInitRequest) GetRequest() *types.MsgChannelOpenInit {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelOpenInitRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ChannelOpenInitResponse struct {
	Response  *types.MsgChannelOpenInitResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof     []byte                            `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	ChannelId string                            `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *ChannelOpenInitResponse) Reset()         { *m = ChannelOpenInitResponse{} }
func (m *ChannelOpenInitResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenInitResponse) ProtoMessage()    {}
func (*ChannelOpenInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{1}
}
func (m *ChannelOpenInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenInitResponse.Merge(m, src)
}
func (m *ChannelOpenInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenInitResponse proto.InternalMessageInfo

func (m *ChannelOpenInitResponse) GetResponse() *types.MsgChannelOpenInitResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelOpenInitResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *ChannelOpenInitResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type ChannelOpenTryRequest struct {
	Request *types.MsgChannelOpenTry `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ChannelOpenTryRequest) Reset()         { *m = ChannelOpenTryRequest{} }
func (m *ChannelOpenTryRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenTryRequest) ProtoMessage()    {}
func (*ChannelOpenTryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{2}
}
func (m *ChannelOpenTryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenTryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenTryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenTryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenTryRequest.Merge(m, src)
}
func (m *ChannelOpenTryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenTryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenTryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenTryRequest proto.InternalMessageInfo

func (m *ChannelOpenTryRequest) GetRequest() *types.MsgChannelOpenTry {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelOpenTryRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ChannelOpenTryResponse struct {
	Response  *types.MsgChannelOpenTryResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof     []byte                           `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	ChannelId string                           `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *ChannelOpenTryResponse) Reset()         { *m = ChannelOpenTryResponse{} }
func (m *ChannelOpenTryResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenTryResponse) ProtoMessage()    {}
func (*ChannelOpenTryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{3}
}
func (m *ChannelOpenTryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenTryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenTryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenTryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenTryResponse.Merge(m, src)
}
func (m *ChannelOpenTryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenTryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenTryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenTryResponse proto.InternalMessageInfo

func (m *ChannelOpenTryResponse) GetResponse() *types.MsgChannelOpenTryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelOpenTryResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *ChannelOpenTryResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type ChannelOpenAckRequest struct {
	Request *types.MsgChannelOpenAck `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ChannelOpenAckRequest) Reset()         { *m = ChannelOpenAckRequest{} }
func (m *ChannelOpenAckRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenAckRequest) ProtoMessage()    {}
func (*ChannelOpenAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{4}
}
func (m *ChannelOpenAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenAckRequest.Merge(m, src)
}
func (m *ChannelOpenAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenAckRequest proto.InternalMessageInfo

func (m *ChannelOpenAckRequest) GetRequest() *types.MsgChannelOpenAck {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelOpenAckRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ChannelOpenAckResponse struct {
	Response *types.MsgChannelOpenAckResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                           `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ChannelOpenAckResponse) Reset()         { *m = ChannelOpenAckResponse{} }
func (m *ChannelOpenAckResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenAckResponse) ProtoMessage()    {}
func (*ChannelOpenAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{5}
}
func (m *ChannelOpenAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenAckResponse.Merge(m, src)
}
func (m *ChannelOpenAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenAckResponse proto.InternalMessageInfo

func (m *ChannelOpenAckResponse) GetResponse() *types.MsgChannelOpenAckResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelOpenAckResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type ChannelOpenConfirmRequest struct {
	Request *types.MsgChannelOpenConfirm `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                    `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ChannelOpenConfirmRequest) Reset()         { *m = ChannelOpenConfirmRequest{} }
func (m *ChannelOpenConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenConfirmRequest) ProtoMessage()    {}
func (*ChannelOpenConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{6}
}
func (m *ChannelOpenConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenConfirmRequest.Merge(m, src)
}
func (m *ChannelOpenConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenConfirmRequest proto.InternalMessageInfo

func (m *ChannelOpenConfirmRequest) GetRequest() *types.MsgChannelOpenConfirm {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelOpenConfirmRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ChannelOpenConfirmResponse struct {
	Response *types.MsgChannelOpenConfirmResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                               `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ChannelOpenConfirmResponse) Reset()         { *m = ChannelOpenConfirmResponse{} }
func (m *ChannelOpenConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelOpenConfirmResponse) ProtoMessage()    {}
func (*ChannelOpenConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{7}
}
func (m *ChannelOpenConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelOpenConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelOpenConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelOpenConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelOpenConfirmResponse.Merge(m, src)
}
func (m *ChannelOpenConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelOpenConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelOpenConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelOpenConfirmResponse proto.InternalMessageInfo

func (m *ChannelOpenConfirmResponse) GetResponse() *types.MsgChannelOpenConfirmResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelOpenConfirmResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type ChannelCloseInitRequest struct {
	Request *types.MsgChannelCloseInit `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                  `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ChannelCloseInitRequest) Reset()         { *m = ChannelCloseInitRequest{} }
func (m *ChannelCloseInitRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelCloseInitRequest) ProtoMessage()    {}
func (*ChannelCloseInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{8}
}
func (m *ChannelCloseInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCloseInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCloseInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelCloseInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCloseInitRequest.Merge(m, src)
}
func (m *ChannelCloseInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCloseInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCloseInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCloseInitRequest proto.InternalMessageInfo

func (m *ChannelCloseInitRequest) GetRequest() *types.MsgChannelCloseInit {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelCloseInitRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ChannelCloseInitResponse struct {
	Response *types.MsgChannelCloseInitResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                             `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ChannelCloseInitResponse) Reset()         { *m = ChannelCloseInitResponse{} }
func (m *ChannelCloseInitResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelCloseInitResponse) ProtoMessage()    {}
func (*ChannelCloseInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{9}
}
func (m *ChannelCloseInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCloseInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCloseInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelCloseInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCloseInitResponse.Merge(m, src)
}
func (m *ChannelCloseInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCloseInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCloseInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCloseInitResponse proto.InternalMessageInfo

func (m *ChannelCloseInitResponse) GetResponse() *types.MsgChannelCloseInitResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelCloseInitResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type ChannelCloseConfirmRequest struct {
	Request *types.MsgChannelCloseConfirm `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                     `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ChannelCloseConfirmRequest) Reset()         { *m = ChannelCloseConfirmRequest{} }
func (m *ChannelCloseConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelCloseConfirmRequest) ProtoMessage()    {}
func (*ChannelCloseConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{10}
}
func (m *ChannelCloseConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCloseConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCloseConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelCloseConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCloseConfirmRequest.Merge(m, src)
}
func (m *ChannelCloseConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCloseConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCloseConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCloseConfirmRequest proto.InternalMessageInfo

func (m *ChannelCloseConfirmRequest) GetRequest() *types.MsgChannelCloseConfirm {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelCloseConfirmRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ChannelCloseConfirmResponse struct {
	Response *types.MsgChannelCloseConfirmResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                                `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ChannelCloseConfirmResponse) Reset()         { *m = ChannelCloseConfirmResponse{} }
func (m *ChannelCloseConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelCloseConfirmResponse) ProtoMessage()    {}
func (*ChannelCloseConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{11}
}
func (m *ChannelCloseConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCloseConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCloseConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelCloseConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCloseConfirmResponse.Merge(m, src)
}
func (m *ChannelCloseConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCloseConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCloseConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCloseConfirmResponse proto.InternalMessageInfo

func (m *ChannelCloseConfirmResponse) GetResponse() *types.MsgChannelCloseConfirmResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelCloseConfirmResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type RecvPacketRequest struct {
	Request *types.MsgRecvPacket `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef            `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *RecvPacketRequest) Reset()         { *m = RecvPacketRequest{} }
func (m *RecvPacketRequest) String() string { return proto.CompactTextString(m) }
func (*RecvPacketRequest) ProtoMessage()    {}
func (*RecvPacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{12}
}
func (m *RecvPacketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecvPacketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecvPacketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecvPacketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvPacketRequest.Merge(m, src)
}
func (m *RecvPacketRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecvPacketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvPacketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecvPacketRequest proto.InternalMessageInfo

func (m *RecvPacketRequest) GetRequest() *types.MsgRecvPacket {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RecvPacketRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type RecvPacketResponse struct {
	Response *types.MsgRecvPacketResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                       `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *RecvPacketResponse) Reset()         { *m = RecvPacketResponse{} }
func (m *RecvPacketResponse) String() string { return proto.CompactTextString(m) }
func (*RecvPacketResponse) ProtoMessage()    {}
func (*RecvPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{13}
}
func (m *RecvPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecvPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecvPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecvPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvPacketResponse.Merge(m, src)
}
func (m *RecvPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecvPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecvPacketResponse proto.InternalMessageInfo

func (m *RecvPacketResponse) GetResponse() *types.MsgRecvPacketResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RecvPacketResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type TimeoutRequest struct {
	Request *types.MsgTimeout `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef         `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *TimeoutRequest) Reset()         { *m = TimeoutRequest{} }
func (m *TimeoutRequest) String() string { return proto.CompactTextString(m) }
func (*TimeoutRequest) ProtoMessage()    {}
func (*TimeoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{14}
}
func (m *TimeoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutRequest.Merge(m, src)
}
func (m *TimeoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutRequest proto.InternalMessageInfo

func (m *TimeoutRequest) GetRequest() *types.MsgTimeout {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TimeoutRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type TimeoutResponse struct {
	Response *types.MsgTimeoutResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                    `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *TimeoutResponse) Reset()         { *m = TimeoutResponse{} }
func (m *TimeoutResponse) String() string { return proto.CompactTextString(m) }
func (*TimeoutResponse) ProtoMessage()    {}
func (*TimeoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{15}
}
func (m *TimeoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutResponse.Merge(m, src)
}
func (m *TimeoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutResponse proto.InternalMessageInfo

func (m *TimeoutResponse) GetResponse() *types.MsgTimeoutResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TimeoutResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type TimeoutOnCloseRequest struct {
	Request *types.MsgTimeoutOnClose `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *TimeoutOnCloseRequest) Reset()         { *m = TimeoutOnCloseRequest{} }
func (m *TimeoutOnCloseRequest) String() string { return proto.CompactTextString(m) }
func (*TimeoutOnCloseRequest) ProtoMessage()    {}
func (*TimeoutOnCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{16}
}
func (m *TimeoutOnCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutOnCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutOnCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutOnCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutOnCloseRequest.Merge(m, src)
}
func (m *TimeoutOnCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutOnCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutOnCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutOnCloseRequest proto.InternalMessageInfo

func (m *TimeoutOnCloseRequest) GetRequest() *types.MsgTimeoutOnClose {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TimeoutOnCloseRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type TimeoutOnCloseResponse struct {
	Response *types.MsgTimeoutOnCloseResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                           `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *TimeoutOnCloseResponse) Reset()         { *m = TimeoutOnCloseResponse{} }
func (m *TimeoutOnCloseResponse) String() string { return proto.CompactTextString(m) }
func (*TimeoutOnCloseResponse) ProtoMessage()    {}
func (*TimeoutOnCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{17}
}
func (m *TimeoutOnCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutOnCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutOnCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutOnCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutOnCloseResponse.Merge(m, src)
}
func (m *TimeoutOnCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutOnCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutOnCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutOnCloseResponse proto.InternalMessageInfo

func (m *TimeoutOnCloseResponse) GetResponse() *types.MsgTimeoutOnCloseResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TimeoutOnCloseResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type AcknowledgementRequest struct {
	Request *types.MsgAcknowledgement `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                 `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *AcknowledgementRequest) Reset()         { *m = AcknowledgementRequest{} }
func (m *AcknowledgementRequest) String() string { return proto.CompactTextString(m) }
func (*AcknowledgementRequest) ProtoMessage()    {}
func (*AcknowledgementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{18}
}
func (m *AcknowledgementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcknowledgementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcknowledgementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcknowledgementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcknowledgementRequest.Merge(m, src)
}
func (m *AcknowledgementRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcknowledgementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcknowledgementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcknowledgementRequest proto.InternalMessageInfo

func (m *AcknowledgementRequest) GetRequest() *types.MsgAcknowledgement {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AcknowledgementRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type AcknowledgementResponse struct {
	Response *types.MsgAcknowledgementResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                            `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *AcknowledgementResponse) Reset()         { *m = AcknowledgementResponse{} }
func (m *AcknowledgementResponse) String() string { return proto.CompactTextString(m) }
func (*AcknowledgementResponse) ProtoMessage()    {}
func (*AcknowledgementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_746eaa491c2a2e31, []int{19}
}
func (m *AcknowledgementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcknowledgementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcknowledgementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcknowledgementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcknowledgementResponse.Merge(m, src)
}
func (m *AcknowledgementResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcknowledgementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcknowledgementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcknowledgementResponse proto.InternalMessageInfo

func (m *AcknowledgementResponse) GetResponse() *types.MsgAcknowledgementResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *AcknowledgementResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*ChannelOpenInitRequest)(nil), "ibc.lightclients.corda.v1.ChannelOpenInitRequest")
	proto.RegisterType((*ChannelOpenInitResponse)(nil), "ibc.lightclients.corda.v1.ChannelOpenInitResponse")
	proto.RegisterType((*ChannelOpenTryRequest)(nil), "ibc.lightclients.corda.v1.ChannelOpenTryRequest")
	proto.RegisterType((*ChannelOpenTryResponse)(nil), "ibc.lightclients.corda.v1.ChannelOpenTryResponse")
	proto.RegisterType((*ChannelOpenAckRequest)(nil), "ibc.lightclients.corda.v1.ChannelOpenAckRequest")
	proto.RegisterType((*ChannelOpenAckResponse)(nil), "ibc.lightclients.corda.v1.ChannelOpenAckResponse")
	proto.RegisterType((*ChannelOpenConfirmRequest)(nil), "ibc.lightclients.corda.v1.ChannelOpenConfirmRequest")
	proto.RegisterType((*ChannelOpenConfirmResponse)(nil), "ibc.lightclients.corda.v1.ChannelOpenConfirmResponse")
	proto.RegisterType((*ChannelCloseInitRequest)(nil), "ibc.lightclients.corda.v1.ChannelCloseInitRequest")
	proto.RegisterType((*ChannelCloseInitResponse)(nil), "ibc.lightclients.corda.v1.ChannelCloseInitResponse")
	proto.RegisterType((*ChannelCloseConfirmRequest)(nil), "ibc.lightclients.corda.v1.ChannelCloseConfirmRequest")
	proto.RegisterType((*ChannelCloseConfirmResponse)(nil), "ibc.lightclients.corda.v1.ChannelCloseConfirmResponse")
	proto.RegisterType((*RecvPacketRequest)(nil), "ibc.lightclients.corda.v1.RecvPacketRequest")
	proto.RegisterType((*RecvPacketResponse)(nil), "ibc.lightclients.corda.v1.RecvPacketResponse")
	proto.RegisterType((*TimeoutRequest)(nil), "ibc.lightclients.corda.v1.TimeoutRequest")
	proto.RegisterType((*TimeoutResponse)(nil), "ibc.lightclients.corda.v1.TimeoutResponse")
	proto.RegisterType((*TimeoutOnCloseRequest)(nil), "ibc.lightclients.corda.v1.TimeoutOnCloseRequest")
	proto.RegisterType((*TimeoutOnCloseResponse)(nil), "ibc.lightclients.corda.v1.TimeoutOnCloseResponse")
	proto.RegisterType((*AcknowledgementRequest)(nil), "ibc.lightclients.corda.v1.AcknowledgementRequest")
	proto.RegisterType((*AcknowledgementResponse)(nil), "ibc.lightclients.corda.v1.AcknowledgementResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/tx_channel.proto", fileDescriptor_746eaa491c2a2e31)
}

var fileDescriptor_746eaa491c2a2e31 = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xed, 0xbc, 0xa7, 0xd7, 0xbe, 0x5e, 0x50, 0x0b, 0xc3, 0x47, 0x5b, 0x03, 0xa1, 0x0a, 0x12,
	0x2d, 0x29, 0xb1, 0x9b, 0x94, 0x22, 0x21, 0x75, 0x41, 0x1a, 0x40, 0x2a, 0x50, 0x82, 0x42, 0x57,
	0x6c, 0x4a, 0xe2, 0x4c, 0x13, 0x2b, 0x89, 0x1d, 0x6c, 0x27, 0x24, 0x80, 0x90, 0x40, 0xdd, 0xb0,
	0x82, 0x1d, 0x42, 0x2c, 0x10, 0x7f, 0x83, 0x5f, 0xc0, 0xb2, 0x4b, 0x96, 0xa8, 0xfd, 0x23, 0xc8,
	0xf6, 0x24, 0x71, 0xc6, 0x1f, 0x19, 0x53, 0xb3, 0x73, 0xa2, 0x39, 0xe7, 0x9e, 0x7b, 0xe6, 0xea,
	0xde, 0xab, 0x81, 0x94, 0x52, 0x96, 0xa5, 0x86, 0x52, 0xad, 0x99, 0x72, 0x43, 0x21, 0xaa, 0x69,
	0x48, 0xb2, 0xa6, 0x57, 0x4a, 0x52, 0x27, 0x23, 0x99, 0xdd, 0x5d, 0xb9, 0x56, 0x52, 0x55, 0xd2,
	0x10, 0x5b, 0xba, 0x66, 0x6a, 0x78, 0x41, 0x29, 0xcb, 0xa2, 0xfb, 0xac, 0x68, 0x9f, 0x15, 0x3b,
	0x19, 0xe1, 0xa2, 0x45, 0x23, 0x6b, 0x3a, 0x91, 0x28, 0xc4, 0x21, 0x70, 0x80, 0xc2, 0x4a, 0x70,
	0x10, 0xfb, 0x23, 0x6d, 0xf6, 0x5a, 0xc4, 0x70, 0x0e, 0x27, 0x3f, 0x23, 0x38, 0x9f, 0x77, 0x48,
	0x0a, 0x2d, 0xa2, 0x6e, 0xa9, 0x8a, 0x59, 0x24, 0xcf, 0xdb, 0xc4, 0x30, 0x71, 0x0e, 0xa6, 0x74,
	0xe7, 0x73, 0x1e, 0x2d, 0xa2, 0xe5, 0x13, 0xd9, 0x25, 0xd1, 0x92, 0x64, 0xc5, 0x15, 0xfb, 0x52,
	0x3b, 0x19, 0x71, 0xdb, 0xa8, 0xb2, 0x04, 0x7d, 0x1c, 0xde, 0x80, 0xa9, 0x72, 0xc9, 0x20, 0xbb,
	0x4a, 0x65, 0xfe, 0x1f, 0x9b, 0xe2, 0x8a, 0x18, 0x98, 0x95, 0xf8, 0xc4, 0x2c, 0x99, 0xa4, 0x48,
	0xf6, 0x8a, 0x93, 0x16, 0x66, 0xab, 0x92, 0xfc, 0x82, 0x60, 0xce, 0xa3, 0xcd, 0x68, 0x69, 0xaa,
	0x41, 0xf0, 0x03, 0xf8, 0x5f, 0xa7, 0xdf, 0x54, 0x9d, 0xc4, 0xab, 0x8e, 0xc2, 0x8a, 0x03, 0x02,
	0x7c, 0x16, 0xfe, 0x6b, 0xe9, 0x9a, 0xb6, 0x67, 0x8b, 0x3c, 0x59, 0x74, 0x7e, 0xe0, 0x4b, 0x00,
	0x94, 0xc8, 0xd2, 0xff, 0xef, 0x22, 0x5a, 0x9e, 0x2e, 0x4e, 0xd3, 0x7f, 0xb6, 0x2a, 0xc9, 0x4f,
	0x08, 0xce, 0xb9, 0xa8, 0x77, 0xf4, 0x5e, 0xdf, 0xb8, 0xdb, 0xac, 0x71, 0x57, 0x39, 0xa4, 0x59,
	0xf8, 0x98, 0x7c, 0x63, 0xee, 0xd4, 0x56, 0x46, 0x33, 0xbd, 0xef, 0xb1, 0x4d, 0xe4, 0xd4, 0xf6,
	0x77, 0x5c, 0xcb, 0xc9, 0xf5, 0x63, 0xb9, 0x66, 0xe1, 0x63, 0x72, 0xed, 0xe5, 0x88, 0x69, 0xb6,
	0xb0, 0x63, 0x99, 0xe6, 0x62, 0x18, 0x67, 0x5a, 0xf2, 0x2b, 0x82, 0x05, 0x17, 0x34, 0xaf, 0xa9,
	0x7b, 0x8a, 0xde, 0xec, 0x3b, 0x73, 0x87, 0x75, 0x26, 0xc5, 0x11, 0xbe, 0xcf, 0x11, 0x93, 0x3b,
	0xef, 0x10, 0x08, 0x7e, 0x0a, 0x69, 0x5a, 0x8f, 0x3c, 0x16, 0x65, 0x23, 0x68, 0xe4, 0xb5, 0xc9,
	0xd5, 0x10, 0xf2, 0x0d, 0xcd, 0x20, 0xee, 0x6e, 0xb5, 0xc9, 0x9a, 0xb4, 0x3c, 0x46, 0xc0, 0x90,
	0x21, 0x26, 0x8b, 0xde, 0xc0, 0xbc, 0x57, 0x1c, 0xcd, 0xe7, 0xa1, 0xc7, 0x9f, 0x55, 0x6e, 0x79,
	0xbc, 0xee, 0x7c, 0x1b, 0x5e, 0x91, 0x0d, 0x66, 0xaa, 0xe8, 0x2e, 0x6b, 0xd0, 0x0a, 0x8f, 0x82,
	0x98, 0xcb, 0x68, 0x1f, 0xc1, 0x05, 0x5f, 0x8d, 0x34, 0xb3, 0x82, 0xc7, 0xa7, 0xb5, 0x28, 0x2a,
	0x79, 0xad, 0xfa, 0x80, 0xe0, 0x74, 0x91, 0xc8, 0x9d, 0xc7, 0x25, 0xb9, 0x4e, 0x06, 0x25, 0xb4,
	0xc1, 0x3a, 0x94, 0x0c, 0x8a, 0xed, 0xc2, 0xc6, 0x64, 0x8c, 0x0e, 0xd8, 0x2d, 0x88, 0xaa, 0xbf,
	0xe7, 0xb1, 0x23, 0xc5, 0x21, 0x89, 0xd7, 0x85, 0xf7, 0x08, 0x66, 0x76, 0x94, 0x26, 0xd1, 0xda,
	0x03, 0x0b, 0x6e, 0xb1, 0x16, 0x5c, 0x0e, 0x8a, 0xd7, 0x07, 0xc6, 0x94, 0x7f, 0x03, 0x66, 0x07,
	0x52, 0xa8, 0xe8, 0xbc, 0x27, 0xf9, 0xa5, 0x71, 0x62, 0x78, 0x33, 0xb7, 0xa6, 0x10, 0xc5, 0x14,
	0x54, 0xbb, 0x82, 0xa2, 0x4f, 0x21, 0x06, 0x1f, 0xdf, 0x14, 0x62, 0x85, 0x45, 0x9f, 0x42, 0xfe,
	0x0c, 0x63, 0x5d, 0xb1, 0xf6, 0x86, 0x9c, 0x5c, 0x57, 0xb5, 0x17, 0x0d, 0x52, 0xa9, 0x92, 0x26,
	0x51, 0xff, 0x60, 0x17, 0x64, 0x09, 0x62, 0xf2, 0xe5, 0x35, 0xcc, 0x79, 0xa4, 0x45, 0x5f, 0x05,
	0x03, 0x28, 0xc6, 0x39, 0x93, 0xfd, 0x3e, 0x0d, 0x40, 0xfb, 0xcd, 0xb6, 0x51, 0xc5, 0x5d, 0x98,
	0x65, 0x96, 0x4a, 0x9c, 0x09, 0x49, 0xc6, 0x7f, 0xbf, 0x16, 0xb2, 0x51, 0x20, 0x54, 0x5e, 0x1b,
	0x66, 0x46, 0xf7, 0x32, 0xbc, 0xca, 0xc7, 0x32, 0x5c, 0x4f, 0x85, 0x4c, 0x04, 0x84, 0x6f, 0xd8,
	0x9c, 0x5c, 0xe7, 0x0d, 0x3b, 0xdc, 0xef, 0x78, 0xc3, 0xba, 0x17, 0xaf, 0xb7, 0x08, 0xb0, 0x77,
	0x5d, 0xc0, 0x37, 0xf8, 0x98, 0x46, 0xe7, 0x9f, 0xb0, 0x1e, 0x11, 0x45, 0x35, 0xbc, 0x82, 0x53,
	0xec, 0x44, 0xc6, 0x1c, 0x37, 0xc7, 0xee, 0x27, 0xc2, 0x5a, 0x24, 0x0c, 0x0d, 0xbe, 0x8f, 0xe0,
	0x8c, 0xcf, 0x9c, 0xc3, 0xeb, 0x9c, 0x64, 0x8c, 0x05, 0x37, 0xa3, 0xc2, 0xa8, 0x0c, 0x05, 0x60,
	0x38, 0x5e, 0xf0, 0xf5, 0x10, 0x16, 0xcf, 0x50, 0x15, 0xd2, 0x9c, 0xa7, 0x69, 0xa8, 0x67, 0x30,
	0x45, 0xbb, 0x17, 0xbe, 0x16, 0x82, 0x1c, 0x1d, 0x5b, 0x42, 0x8a, 0xe7, 0xe8, 0xb0, 0x96, 0x47,
	0xfb, 0x63, 0x68, 0x2d, 0xfb, 0x4e, 0x89, 0xd0, 0x5a, 0x0e, 0x68, 0xdf, 0x5d, 0x98, 0x65, 0xba,
	0x4f, 0x68, 0xcf, 0xf0, 0xef, 0xc3, 0xa1, 0x3d, 0x23, 0xa0, 0xb9, 0x6d, 0x2a, 0x3f, 0x0e, 0x13,
	0xe8, 0xe0, 0x30, 0x81, 0x7e, 0x1d, 0x26, 0xd0, 0xc7, 0xa3, 0xc4, 0xc4, 0xc1, 0x51, 0x62, 0xe2,
	0xe7, 0x51, 0x62, 0xe2, 0x69, 0xa1, 0xaa, 0x98, 0xb5, 0x76, 0x59, 0x94, 0xb5, 0xa6, 0x54, 0xeb,
	0xb5, 0x88, 0x6e, 0x83, 0xf5, 0x74, 0xa3, 0x54, 0x36, 0xa4, 0x5e, 0x5b, 0x49, 0x3b, 0xef, 0x05,
	0x4a, 0x59, 0x96, 0xaa, 0x9a, 0xd4, 0x95, 0x06, 0x0f, 0x0b, 0xe9, 0xfe, 0xcb, 0x42, 0xb7, 0xeb,
	0x9c, 0x91, 0xec, 0x37, 0x85, 0xf2, 0xa4, 0xfd, 0xa8, 0xb0, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0xed, 0x7a, 0x4a, 0xcd, 0xe8, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChannelMsgClient is the client API for ChannelMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelMsgClient interface {
	ChannelOpenInit(ctx context.Context, in *ChannelOpenInitRequest, opts ...grpc.CallOption) (*ChannelOpenInitResponse, error)
	ChannelOpenTry(ctx context.Context, in *ChannelOpenTryRequest, opts ...grpc.CallOption) (*ChannelOpenTryResponse, error)
	ChannelOpenAck(ctx context.Context, in *ChannelOpenAckRequest, opts ...grpc.CallOption) (*ChannelOpenAckResponse, error)
	ChannelOpenConfirm(ctx context.Context, in *ChannelOpenConfirmRequest, opts ...grpc.CallOption) (*ChannelOpenConfirmResponse, error)
	ChannelCloseInit(ctx context.Context, in *ChannelCloseInitRequest, opts ...grpc.CallOption) (*ChannelCloseInitResponse, error)
	ChannelCloseConfirm(ctx context.Context, in *ChannelCloseConfirmRequest, opts ...grpc.CallOption) (*ChannelCloseConfirmResponse, error)
	RecvPacket(ctx context.Context, in *RecvPacketRequest, opts ...grpc.CallOption) (*RecvPacketResponse, error)
	Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
	TimeoutOnClose(ctx context.Context, in *TimeoutOnCloseRequest, opts ...grpc.CallOption) (*TimeoutOnCloseResponse, error)
	Acknowledgement(ctx context.Context, in *AcknowledgementRequest, opts ...grpc.CallOption) (*AcknowledgementResponse, error)
}

type channelMsgClient struct {
	cc grpc1.ClientConn
}

func NewChannelMsgClient(cc grpc1.ClientConn) ChannelMsgClient {
	return &channelMsgClient{cc}
}

func (c *channelMsgClient) ChannelOpenInit(ctx context.Context, in *ChannelOpenInitRequest, opts ...grpc.CallOption) (*ChannelOpenInitResponse, error) {
	out := new(ChannelOpenInitResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) ChannelOpenTry(ctx context.Context, in *ChannelOpenTryRequest, opts ...grpc.CallOption) (*ChannelOpenTryResponse, error) {
	out := new(ChannelOpenTryResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenTry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) ChannelOpenAck(ctx context.Context, in *ChannelOpenAckRequest, opts ...grpc.CallOption) (*ChannelOpenAckResponse, error) {
	out := new(ChannelOpenAckResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) ChannelOpenConfirm(ctx context.Context, in *ChannelOpenConfirmRequest, opts ...grpc.CallOption) (*ChannelOpenConfirmResponse, error) {
	out := new(ChannelOpenConfirmResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) ChannelCloseInit(ctx context.Context, in *ChannelCloseInitRequest, opts ...grpc.CallOption) (*ChannelCloseInitResponse, error) {
	out := new(ChannelCloseInitResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/ChannelCloseInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) ChannelCloseConfirm(ctx context.Context, in *ChannelCloseConfirmRequest, opts ...grpc.CallOption) (*ChannelCloseConfirmResponse, error) {
	out := new(ChannelCloseConfirmResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/ChannelCloseConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) RecvPacket(ctx context.Context, in *RecvPacketRequest, opts ...grpc.CallOption) (*RecvPacketResponse, error) {
	out := new(RecvPacketResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/RecvPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/Timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) TimeoutOnClose(ctx context.Context, in *TimeoutOnCloseRequest, opts ...grpc.CallOption) (*TimeoutOnCloseResponse, error) {
	out := new(TimeoutOnCloseResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/TimeoutOnClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelMsgClient) Acknowledgement(ctx context.Context, in *AcknowledgementRequest, opts ...grpc.CallOption) (*AcknowledgementResponse, error) {
	out := new(AcknowledgementResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ChannelMsg/Acknowledgement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelMsgServer is the server API for ChannelMsg service.
type ChannelMsgServer interface {
	ChannelOpenInit(context.Context, *ChannelOpenInitRequest) (*ChannelOpenInitResponse, error)
	ChannelOpenTry(context.Context, *ChannelOpenTryRequest) (*ChannelOpenTryResponse, error)
	ChannelOpenAck(context.Context, *ChannelOpenAckRequest) (*ChannelOpenAckResponse, error)
	ChannelOpenConfirm(context.Context, *ChannelOpenConfirmRequest) (*ChannelOpenConfirmResponse, error)
	ChannelCloseInit(context.Context, *ChannelCloseInitRequest) (*ChannelCloseInitResponse, error)
	ChannelCloseConfirm(context.Context, *ChannelCloseConfirmRequest) (*ChannelCloseConfirmResponse, error)
	RecvPacket(context.Context, *RecvPacketRequest) (*RecvPacketResponse, error)
	Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error)
	TimeoutOnClose(context.Context, *TimeoutOnCloseRequest) (*TimeoutOnCloseResponse, error)
	Acknowledgement(context.Context, *AcknowledgementRequest) (*AcknowledgementResponse, error)
}

// UnimplementedChannelMsgServer can be embedded to have forward compatible implementations.
type UnimplementedChannelMsgServer struct {
}

func (*UnimplementedChannelMsgServer) ChannelOpenInit(ctx context.Context, req *ChannelOpenInitRequest) (*ChannelOpenInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenInit not implemented")
}
func (*UnimplementedChannelMsgServer) ChannelOpenTry(ctx context.Context, req *ChannelOpenTryRequest) (*ChannelOpenTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenTry not implemented")
}
func (*UnimplementedChannelMsgServer) ChannelOpenAck(ctx context.Context, req *ChannelOpenAckRequest) (*ChannelOpenAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenAck not implemented")
}
func (*UnimplementedChannelMsgServer) ChannelOpenConfirm(ctx context.Context, req *ChannelOpenConfirmRequest) (*ChannelOpenConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenConfirm not implemented")
}
func (*UnimplementedChannelMsgServer) ChannelCloseInit(ctx context.Context, req *ChannelCloseInitRequest) (*ChannelCloseInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCloseInit not implemented")
}
func (*UnimplementedChannelMsgServer) ChannelCloseConfirm(ctx context.Context, req *ChannelCloseConfirmRequest) (*ChannelCloseConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCloseConfirm not implemented")
}
func (*UnimplementedChannelMsgServer) RecvPacket(ctx context.Context, req *RecvPacketRequest) (*RecvPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvPacket not implemented")
}
func (*UnimplementedChannelMsgServer) Timeout(ctx context.Context, req *TimeoutRequest) (*TimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}
func (*UnimplementedChannelMsgServer) TimeoutOnClose(ctx context.Context, req *TimeoutOnCloseRequest) (*TimeoutOnCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutOnClose not implemented")
}
func (*UnimplementedChannelMsgServer) Acknowledgement(ctx context.Context, req *AcknowledgementRequest) (*AcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acknowledgement not implemented")
}

func RegisterChannelMsgServer(s grpc1.Server, srv ChannelMsgServer) {
	s.RegisterService(&_ChannelMsg_serviceDesc, srv)
}

func _ChannelMsg_ChannelOpenInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelOpenInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).ChannelOpenInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).ChannelOpenInit(ctx, req.(*ChannelOpenInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_ChannelOpenTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelOpenTryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).ChannelOpenTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenTry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).ChannelOpenTry(ctx, req.(*ChannelOpenTryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_ChannelOpenAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelOpenAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).ChannelOpenAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).ChannelOpenAck(ctx, req.(*ChannelOpenAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_ChannelOpenConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelOpenConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).ChannelOpenConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/ChannelOpenConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).ChannelOpenConfirm(ctx, req.(*ChannelOpenConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_ChannelCloseInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCloseInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).ChannelCloseInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/ChannelCloseInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).ChannelCloseInit(ctx, req.(*ChannelCloseInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_ChannelCloseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCloseConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).ChannelCloseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/ChannelCloseConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).ChannelCloseConfirm(ctx, req.(*ChannelCloseConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_RecvPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).RecvPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/RecvPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).RecvPacket(ctx, req.(*RecvPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).Timeout(ctx, req.(*TimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_TimeoutOnClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutOnCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).TimeoutOnClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/TimeoutOnClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).TimeoutOnClose(ctx, req.(*TimeoutOnCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelMsg_Acknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelMsgServer).Acknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ChannelMsg/Acknowledgement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelMsgServer).Acknowledgement(ctx, req.(*AcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.ChannelMsg",
	HandlerType: (*ChannelMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChannelOpenInit",
			Handler:    _ChannelMsg_ChannelOpenInit_Handler,
		},
		{
			MethodName: "ChannelOpenTry",
			Handler:    _ChannelMsg_ChannelOpenTry_Handler,
		},
		{
			MethodName: "ChannelOpenAck",
			Handler:    _ChannelMsg_ChannelOpenAck_Handler,
		},
		{
			MethodName: "ChannelOpenConfirm",
			Handler:    _ChannelMsg_ChannelOpenConfirm_Handler,
		},
		{
			MethodName: "ChannelCloseInit",
			Handler:    _ChannelMsg_ChannelCloseInit_Handler,
		},
		{
			MethodName: "ChannelCloseConfirm",
			Handler:    _ChannelMsg_ChannelCloseConfirm_Handler,
		},
		{
			MethodName: "RecvPacket",
			Handler:    _ChannelMsg_RecvPacket_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _ChannelMsg_Timeout_Handler,
		},
		{
			MethodName: "TimeoutOnClose",
			Handler:    _ChannelMsg_TimeoutOnClose_Handler,
		},
		{
			MethodName: "Acknowledgement",
			Handler:    _ChannelMsg_Acknowledgement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/tx_channel.proto",
}

func (m *ChannelOpenInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenTryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenTryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenTryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenTryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenTryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenTryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelOpenConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelOpenConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelOpenConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelCloseInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCloseInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelCloseInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelCloseInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCloseInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelCloseInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelCloseConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCloseConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelCloseConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelCloseConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCloseConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelCloseConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecvPacketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvPacketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecvPacketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecvPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecvPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutOnCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutOnCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutOnCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutOnCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutOnCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutOnCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcknowledgementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcknowledgementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcknowledgementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AcknowledgementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcknowledgementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcknowledgementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxChannel(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxChannel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxChannel(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxChannel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChannelOpenInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenTryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenTryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelOpenConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelCloseInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelCloseInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelCloseConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *ChannelCloseConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *RecvPacketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *RecvPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *TimeoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *TimeoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *TimeoutOnCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *TimeoutOnCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *AcknowledgementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func (m *AcknowledgementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxChannel(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxChannel(uint64(l))
	}
	return n
}

func sovTxChannel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxChannel(x uint64) (n int) {
	return sovTxChannel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelOpenInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgChannelOpenInit{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgChannelOpenInitResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenTryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenTryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenTryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgChannelOpenTry{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenTryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenTryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenTryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgChannelOpenTryResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgChannelOpenAck{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgChannelOpenAckResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgChannelOpenConfirm{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelOpenConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelOpenConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelOpenConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgChannelOpenConfirmResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCloseInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCloseInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCloseInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgChannelCloseInit{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCloseInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCloseInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCloseInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgChannelCloseInitResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCloseConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCloseConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCloseConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgChannelCloseConfirm{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCloseConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCloseConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCloseConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgChannelCloseConfirmResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvPacketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvPacketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvPacketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgRecvPacket{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgRecvPacketResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgTimeout{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgTimeoutResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutOnCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutOnCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutOnCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgTimeoutOnClose{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutOnCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutOnCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutOnCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgTimeoutOnCloseResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcknowledgementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcknowledgementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcknowledgementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgAcknowledgement{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcknowledgementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcknowledgementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcknowledgementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgAcknowledgementResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxChannel
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxChannel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxChannel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxChannel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxChannel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxChannel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxChannel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxChannel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxChannel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxChannel = fmt.Errorf("proto: unexpected end of group")
)
