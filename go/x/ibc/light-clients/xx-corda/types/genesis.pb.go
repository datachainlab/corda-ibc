// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/genesis.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateGenesisRequest struct {
	Participants []*Party `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (m *CreateGenesisRequest) Reset()         { *m = CreateGenesisRequest{} }
func (m *CreateGenesisRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGenesisRequest) ProtoMessage()    {}
func (*CreateGenesisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f6fdbaebc64fb0, []int{0}
}
func (m *CreateGenesisRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGenesisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGenesisRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGenesisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGenesisRequest.Merge(m, src)
}
func (m *CreateGenesisRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGenesisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGenesisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGenesisRequest proto.InternalMessageInfo

func (m *CreateGenesisRequest) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

type CreateGenesisResponse struct {
	BaseId *StateRef `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *CreateGenesisResponse) Reset()         { *m = CreateGenesisResponse{} }
func (m *CreateGenesisResponse) String() string { return proto.CompactTextString(m) }
func (*CreateGenesisResponse) ProtoMessage()    {}
func (*CreateGenesisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05f6fdbaebc64fb0, []int{1}
}
func (m *CreateGenesisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGenesisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGenesisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGenesisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGenesisResponse.Merge(m, src)
}
func (m *CreateGenesisResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateGenesisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGenesisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGenesisResponse proto.InternalMessageInfo

func (m *CreateGenesisResponse) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateGenesisRequest)(nil), "ibc.lightclients.corda.v1.CreateGenesisRequest")
	proto.RegisterType((*CreateGenesisResponse)(nil), "ibc.lightclients.corda.v1.CreateGenesisResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/genesis.proto", fileDescriptor_05f6fdbaebc64fb0)
}

var fileDescriptor_05f6fdbaebc64fb0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0x02, 0x41,
	0x14, 0xc7, 0x1d, 0x02, 0x83, 0xb1, 0x3a, 0x2c, 0x05, 0xe6, 0x61, 0x11, 0x3b, 0x24, 0x84, 0x33,
	0x69, 0xd7, 0x4e, 0x15, 0x48, 0xb7, 0x58, 0xe9, 0x12, 0x41, 0xbc, 0x99, 0x7d, 0xad, 0x03, 0xb6,
	0xb3, 0xcd, 0x3c, 0x45, 0xef, 0x7d, 0x80, 0x3e, 0x56, 0x47, 0x8f, 0x1d, 0x43, 0xbf, 0x48, 0xb8,
	0x6e, 0x91, 0x91, 0xd2, 0xed, 0x1d, 0xde, 0xff, 0xf7, 0xe7, 0xcf, 0x8f, 0x1f, 0x1b, 0xa5, 0xe5,
	0xc0, 0x24, 0x7d, 0xd2, 0x03, 0x83, 0x29, 0x79, 0xa9, 0xad, 0x8b, 0x41, 0x8e, 0xda, 0x32, 0xc1,
	0x14, 0xbd, 0xf1, 0x22, 0x73, 0x96, 0x6c, 0x70, 0x68, 0x94, 0x16, 0x3f, 0x1f, 0x45, 0xfe, 0x28,
	0x46, 0xed, 0xda, 0xc9, 0x7a, 0x46, 0x7e, 0xb4, 0x68, 0x92, 0x61, 0xc1, 0x69, 0xdc, 0xf3, 0xfd,
	0x4b, 0x87, 0x40, 0xd8, 0x5d, 0xe2, 0x23, 0x7c, 0x1e, 0xa2, 0xa7, 0xe0, 0x8a, 0xef, 0x64, 0xe0,
	0xc8, 0x68, 0x93, 0x41, 0x4a, 0xbe, 0xca, 0xea, 0x5b, 0xcd, 0x4a, 0xa7, 0x2e, 0xd6, 0xd6, 0x8a,
	0x1b, 0x70, 0x34, 0x89, 0x56, 0x52, 0x8d, 0x5b, 0x7e, 0xf0, 0x8b, 0xee, 0x33, 0x9b, 0x7a, 0x0c,
	0xce, 0xf9, 0xb6, 0x02, 0x8f, 0x0f, 0x26, 0xae, 0xb2, 0x3a, 0x6b, 0x56, 0x3a, 0x47, 0x1b, 0xc8,
	0x3d, 0x02, 0xc2, 0x08, 0x1f, 0xa3, 0xf2, 0x22, 0x73, 0x1d, 0x77, 0x5e, 0x18, 0xdf, 0x2b, 0x88,
	0x3d, 0x74, 0x23, 0xa3, 0x31, 0x70, 0x7c, 0x77, 0xa5, 0x29, 0x90, 0x1b, 0x80, 0x7f, 0x2d, 0xae,
	0x9d, 0xfe, 0x3f, 0xb0, 0x1c, 0x71, 0x01, 0x6f, 0xb3, 0x90, 0x4d, 0x67, 0x21, 0xfb, 0x98, 0x85,
	0xec, 0x75, 0x1e, 0x96, 0xa6, 0xf3, 0xb0, 0xf4, 0x3e, 0x0f, 0x4b, 0x77, 0xdd, 0xc4, 0x50, 0x7f,
	0xa8, 0x84, 0xb6, 0x4f, 0x32, 0x06, 0x02, 0xdd, 0x07, 0x93, 0x0e, 0x40, 0x15, 0x02, 0x16, 0x82,
	0x12, 0x2b, 0xc7, 0xf2, 0xdb, 0x54, 0xeb, 0x4b, 0xd5, 0x78, 0xdc, 0x5a, 0xda, 0xca, 0x25, 0xa9,
	0x72, 0x6e, 0xe9, 0xec, 0x33, 0x00, 0x00, 0xff, 0xff, 0x35, 0x27, 0x04, 0xfe, 0x18, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GenesisServiceClient is the client API for GenesisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenesisServiceClient interface {
	CreateGenesis(ctx context.Context, in *CreateGenesisRequest, opts ...grpc.CallOption) (*CreateGenesisResponse, error)
}

type genesisServiceClient struct {
	cc grpc1.ClientConn
}

func NewGenesisServiceClient(cc grpc1.ClientConn) GenesisServiceClient {
	return &genesisServiceClient{cc}
}

func (c *genesisServiceClient) CreateGenesis(ctx context.Context, in *CreateGenesisRequest, opts ...grpc.CallOption) (*CreateGenesisResponse, error) {
	out := new(CreateGenesisResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.GenesisService/CreateGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenesisServiceServer is the server API for GenesisService service.
type GenesisServiceServer interface {
	CreateGenesis(context.Context, *CreateGenesisRequest) (*CreateGenesisResponse, error)
}

// UnimplementedGenesisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGenesisServiceServer struct {
}

func (*UnimplementedGenesisServiceServer) CreateGenesis(ctx context.Context, req *CreateGenesisRequest) (*CreateGenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesis not implemented")
}

func RegisterGenesisServiceServer(s grpc1.Server, srv GenesisServiceServer) {
	s.RegisterService(&_GenesisService_serviceDesc, srv)
}

func _GenesisService_CreateGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenesisServiceServer).CreateGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.GenesisService/CreateGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenesisServiceServer).CreateGenesis(ctx, req.(*CreateGenesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GenesisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.GenesisService",
	HandlerType: (*GenesisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenesis",
			Handler:    _GenesisService_CreateGenesis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/genesis.proto",
}

func (m *CreateGenesisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGenesisRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGenesisRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateGenesisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGenesisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGenesisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateGenesisRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *CreateGenesisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateGenesisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGenesisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGenesisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGenesisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGenesisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGenesisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
