// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/query_connection.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v4/modules/core/03-connection/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryConnectionRequest struct {
	Request *types.QueryConnectionRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                     `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *QueryConnectionRequest) Reset()         { *m = QueryConnectionRequest{} }
func (m *QueryConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionRequest) ProtoMessage()    {}
func (*QueryConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{0}
}
func (m *QueryConnectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionRequest.Merge(m, src)
}
func (m *QueryConnectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionRequest proto.InternalMessageInfo

func (m *QueryConnectionRequest) GetRequest() *types.QueryConnectionRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryConnectionRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type QueryConnectionResponse struct {
	Response *types.QueryConnectionResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QueryConnectionResponse) Reset()         { *m = QueryConnectionResponse{} }
func (m *QueryConnectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionResponse) ProtoMessage()    {}
func (*QueryConnectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{1}
}
func (m *QueryConnectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionResponse.Merge(m, src)
}
func (m *QueryConnectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionResponse proto.InternalMessageInfo

func (m *QueryConnectionResponse) GetResponse() *types.QueryConnectionResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QueryConnectionsRequest struct {
	Request *types.QueryConnectionsRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                      `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *QueryConnectionsRequest) Reset()         { *m = QueryConnectionsRequest{} }
func (m *QueryConnectionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionsRequest) ProtoMessage()    {}
func (*QueryConnectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{2}
}
func (m *QueryConnectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionsRequest.Merge(m, src)
}
func (m *QueryConnectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionsRequest proto.InternalMessageInfo

func (m *QueryConnectionsRequest) GetRequest() *types.QueryConnectionsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryConnectionsRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type QueryConnectionsResponse struct {
	Response *types.QueryConnectionsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QueryConnectionsResponse) Reset()         { *m = QueryConnectionsResponse{} }
func (m *QueryConnectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionsResponse) ProtoMessage()    {}
func (*QueryConnectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{3}
}
func (m *QueryConnectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionsResponse.Merge(m, src)
}
func (m *QueryConnectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionsResponse proto.InternalMessageInfo

func (m *QueryConnectionsResponse) GetResponse() *types.QueryConnectionsResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QueryClientConnectionsRequest struct {
	Request *types.QueryClientConnectionsRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                            `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *QueryClientConnectionsRequest) Reset()         { *m = QueryClientConnectionsRequest{} }
func (m *QueryClientConnectionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClientConnectionsRequest) ProtoMessage()    {}
func (*QueryClientConnectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{4}
}
func (m *QueryClientConnectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientConnectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientConnectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientConnectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientConnectionsRequest.Merge(m, src)
}
func (m *QueryClientConnectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientConnectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientConnectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientConnectionsRequest proto.InternalMessageInfo

func (m *QueryClientConnectionsRequest) GetRequest() *types.QueryClientConnectionsRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryClientConnectionsRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type QueryClientConnectionsResponse struct {
	Response *types.QueryClientConnectionsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QueryClientConnectionsResponse) Reset()         { *m = QueryClientConnectionsResponse{} }
func (m *QueryClientConnectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClientConnectionsResponse) ProtoMessage()    {}
func (*QueryClientConnectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{5}
}
func (m *QueryClientConnectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientConnectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientConnectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientConnectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientConnectionsResponse.Merge(m, src)
}
func (m *QueryClientConnectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientConnectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientConnectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientConnectionsResponse proto.InternalMessageInfo

func (m *QueryClientConnectionsResponse) GetResponse() *types.QueryClientConnectionsResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QueryConnectionClientStateRequest struct {
	Request *types.QueryConnectionClientStateRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                                `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *QueryConnectionClientStateRequest) Reset()         { *m = QueryConnectionClientStateRequest{} }
func (m *QueryConnectionClientStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionClientStateRequest) ProtoMessage()    {}
func (*QueryConnectionClientStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{6}
}
func (m *QueryConnectionClientStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionClientStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionClientStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionClientStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionClientStateRequest.Merge(m, src)
}
func (m *QueryConnectionClientStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionClientStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionClientStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionClientStateRequest proto.InternalMessageInfo

func (m *QueryConnectionClientStateRequest) GetRequest() *types.QueryConnectionClientStateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryConnectionClientStateRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type QueryConnectionClientStateResponse struct {
	Response *types.QueryConnectionClientStateResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QueryConnectionClientStateResponse) Reset()         { *m = QueryConnectionClientStateResponse{} }
func (m *QueryConnectionClientStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionClientStateResponse) ProtoMessage()    {}
func (*QueryConnectionClientStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{7}
}
func (m *QueryConnectionClientStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionClientStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionClientStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionClientStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionClientStateResponse.Merge(m, src)
}
func (m *QueryConnectionClientStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionClientStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionClientStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionClientStateResponse proto.InternalMessageInfo

func (m *QueryConnectionClientStateResponse) GetResponse() *types.QueryConnectionClientStateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QueryConnectionConsensusStateRequest struct {
	Request *types.QueryConnectionConsensusStateRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                                   `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *QueryConnectionConsensusStateRequest) Reset()         { *m = QueryConnectionConsensusStateRequest{} }
func (m *QueryConnectionConsensusStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionConsensusStateRequest) ProtoMessage()    {}
func (*QueryConnectionConsensusStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{8}
}
func (m *QueryConnectionConsensusStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionConsensusStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionConsensusStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionConsensusStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionConsensusStateRequest.Merge(m, src)
}
func (m *QueryConnectionConsensusStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionConsensusStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionConsensusStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionConsensusStateRequest proto.InternalMessageInfo

func (m *QueryConnectionConsensusStateRequest) GetRequest() *types.QueryConnectionConsensusStateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryConnectionConsensusStateRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type QueryConnectionConsensusStateResponse struct {
	Response *types.QueryConnectionConsensusStateResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *QueryConnectionConsensusStateResponse) Reset()         { *m = QueryConnectionConsensusStateResponse{} }
func (m *QueryConnectionConsensusStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConnectionConsensusStateResponse) ProtoMessage()    {}
func (*QueryConnectionConsensusStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_424afc1a74d7d53c, []int{9}
}
func (m *QueryConnectionConsensusStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConnectionConsensusStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConnectionConsensusStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConnectionConsensusStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConnectionConsensusStateResponse.Merge(m, src)
}
func (m *QueryConnectionConsensusStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConnectionConsensusStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConnectionConsensusStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConnectionConsensusStateResponse proto.InternalMessageInfo

func (m *QueryConnectionConsensusStateResponse) GetResponse() *types.QueryConnectionConsensusStateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryConnectionRequest)(nil), "ibc.lightclients.corda.v1.QueryConnectionRequest")
	proto.RegisterType((*QueryConnectionResponse)(nil), "ibc.lightclients.corda.v1.QueryConnectionResponse")
	proto.RegisterType((*QueryConnectionsRequest)(nil), "ibc.lightclients.corda.v1.QueryConnectionsRequest")
	proto.RegisterType((*QueryConnectionsResponse)(nil), "ibc.lightclients.corda.v1.QueryConnectionsResponse")
	proto.RegisterType((*QueryClientConnectionsRequest)(nil), "ibc.lightclients.corda.v1.QueryClientConnectionsRequest")
	proto.RegisterType((*QueryClientConnectionsResponse)(nil), "ibc.lightclients.corda.v1.QueryClientConnectionsResponse")
	proto.RegisterType((*QueryConnectionClientStateRequest)(nil), "ibc.lightclients.corda.v1.QueryConnectionClientStateRequest")
	proto.RegisterType((*QueryConnectionClientStateResponse)(nil), "ibc.lightclients.corda.v1.QueryConnectionClientStateResponse")
	proto.RegisterType((*QueryConnectionConsensusStateRequest)(nil), "ibc.lightclients.corda.v1.QueryConnectionConsensusStateRequest")
	proto.RegisterType((*QueryConnectionConsensusStateResponse)(nil), "ibc.lightclients.corda.v1.QueryConnectionConsensusStateResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/query_connection.proto", fileDescriptor_424afc1a74d7d53c)
}

var fileDescriptor_424afc1a74d7d53c = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x8b, 0xd3, 0x4e,
	0x18, 0xc7, 0x3b, 0x3f, 0xf8, 0xed, 0xca, 0xb3, 0x07, 0x71, 0x40, 0xad, 0x01, 0x83, 0x56, 0x05,
	0x41, 0x3a, 0xb3, 0xed, 0xa2, 0xb8, 0xd2, 0x45, 0xd1, 0x8b, 0x8b, 0xc2, 0x62, 0x16, 0x16, 0xf4,
	0xb2, 0x34, 0xe9, 0x6c, 0x1b, 0xa8, 0x49, 0x37, 0x33, 0x29, 0x2d, 0x78, 0xf2, 0xe4, 0xd1, 0x83,
	0x57, 0x41, 0x7c, 0x01, 0x1e, 0x3d, 0x79, 0xf0, 0xe8, 0x71, 0x8f, 0x1e, 0xa5, 0x7d, 0x23, 0x92,
	0xcc, 0xf4, 0x8f, 0x99, 0xa4, 0x9b, 0x84, 0xde, 0xc2, 0xee, 0x7c, 0xff, 0x3c, 0x9f, 0x66, 0xc2,
	0x03, 0xdb, 0xae, 0xed, 0xd0, 0xbe, 0xdb, 0xed, 0x09, 0xa7, 0xef, 0x32, 0x4f, 0x70, 0xea, 0xf8,
	0x41, 0xa7, 0x4d, 0x87, 0x0d, 0x7a, 0x1a, 0xb2, 0x60, 0x7c, 0xec, 0xf8, 0x9e, 0xc7, 0x1c, 0xe1,
	0xfa, 0x1e, 0x19, 0x04, 0xbe, 0xf0, 0xf1, 0x35, 0xd7, 0x76, 0xc8, 0xb2, 0x82, 0xc4, 0x0a, 0x32,
	0x6c, 0x18, 0xb5, 0xc8, 0xcc, 0xf1, 0x03, 0x46, 0x17, 0xaa, 0xb9, 0x93, 0x94, 0x1b, 0xf7, 0xb2,
	0x03, 0xe3, 0x87, 0xba, 0x18, 0x0f, 0x18, 0x97, 0x87, 0x6b, 0x5f, 0x10, 0x5c, 0x79, 0x15, 0x89,
	0x9f, 0xcd, 0xfd, 0x2c, 0x76, 0x1a, 0x32, 0x2e, 0xf0, 0x73, 0xd8, 0x0c, 0xe4, 0x63, 0x15, 0xdd,
	0x40, 0x77, 0xb7, 0x9a, 0x84, 0x44, 0xc5, 0xa2, 0x74, 0xb2, 0xd4, 0x79, 0xd8, 0x20, 0xe9, 0x06,
	0xd6, 0x4c, 0x8e, 0x5b, 0xb0, 0x69, 0xb7, 0x39, 0x3b, 0x76, 0x3b, 0xd5, 0xff, 0x62, 0xa7, 0x5b,
	0x24, 0x73, 0x44, 0x72, 0x28, 0xda, 0x82, 0x59, 0xec, 0xc4, 0xda, 0x88, 0x34, 0xfb, 0x9d, 0xda,
	0x09, 0x5c, 0xd5, 0x02, 0xf8, 0xc0, 0xf7, 0x38, 0xc3, 0x2f, 0xe0, 0x42, 0xa0, 0x9e, 0x55, 0x47,
	0x9a, 0xbb, 0xa3, 0x94, 0x59, 0x73, 0x83, 0xda, 0x57, 0xa4, 0x05, 0xf1, 0x19, 0x8b, 0xfd, 0x24,
	0x8b, 0xbc, 0x39, 0x7c, 0xcd, 0x30, 0x7a, 0x50, 0xd5, 0x13, 0x14, 0x8d, 0x97, 0x1a, 0x8d, 0xed,
	0xfc, 0x2d, 0x35, 0x1c, 0xdf, 0x10, 0x5c, 0x97, 0xc7, 0xe2, 0x52, 0x29, 0x50, 0x0e, 0x92, 0x50,
	0xee, 0xaf, 0x8e, 0xcb, 0xf0, 0x59, 0x17, 0x1a, 0x01, 0x66, 0x56, 0x8e, 0x02, 0x64, 0x69, 0x80,
	0x1e, 0x14, 0x6d, 0xac, 0x61, 0xfa, 0x8e, 0xe0, 0x66, 0x82, 0xa6, 0x94, 0xa9, 0x7e, 0x72, 0xb2,
	0xc3, 0x24, 0xaa, 0xdd, 0x9c, 0xbf, 0x8c, 0xee, 0xb5, 0x2e, 0x5c, 0xef, 0xa0, 0xb6, 0x2a, 0x4b,
	0x21, 0x3b, 0xd2, 0x90, 0x3d, 0x2a, 0xd3, 0x5c, 0xc3, 0xf6, 0x03, 0xc1, 0xed, 0xa4, 0x20, 0xfa,
	0x87, 0xc7, 0x43, 0xfe, 0x0f, 0xb9, 0xa3, 0x24, 0xb9, 0x56, 0xde, 0xfc, 0x34, 0xbb, 0x75, 0xc1,
	0x7b, 0x8f, 0xe0, 0xce, 0x39, 0x79, 0x0a, 0xe0, 0x6b, 0x0d, 0xe0, 0x5e, 0xc9, 0x01, 0x92, 0x0c,
	0x9b, 0x3f, 0xff, 0x87, 0x8b, 0x8b, 0xe3, 0xb1, 0x1a, 0x73, 0x80, 0xc5, 0x9f, 0x70, 0x63, 0xc5,
	0x4c, 0xe9, 0x1f, 0x6d, 0xa3, 0x59, 0x44, 0xa2, 0x66, 0x1c, 0xc2, 0xd6, 0xd2, 0x25, 0xc1, 0x05,
	0x2c, 0x66, 0xdf, 0x00, 0x63, 0xa7, 0x90, 0x46, 0xe5, 0x7e, 0x40, 0x70, 0x49, 0xbb, 0xa3, 0xf8,
	0xe1, 0xb9, 0x56, 0x19, 0x1f, 0x22, 0x63, 0xb7, 0x84, 0x52, 0x55, 0xf9, 0x84, 0xe0, 0x72, 0xea,
	0xbb, 0x8f, 0x5b, 0xf9, 0x27, 0xd3, 0x2f, 0xbb, 0xb1, 0x57, 0x52, 0xad, 0x6a, 0x7d, 0x46, 0x50,
	0xcd, 0x7a, 0xa3, 0xf0, 0xe3, 0x02, 0xde, 0x69, 0x97, 0xc9, 0x78, 0x52, 0xde, 0x40, 0xf6, 0x7b,
	0xea, 0xfe, 0x9a, 0x98, 0xe8, 0x6c, 0x62, 0xa2, 0x3f, 0x13, 0x13, 0x7d, 0x9c, 0x9a, 0x95, 0xb3,
	0xa9, 0x59, 0xf9, 0x3d, 0x35, 0x2b, 0x6f, 0x0e, 0xba, 0xae, 0xe8, 0x85, 0x36, 0x71, 0xfc, 0xb7,
	0xb4, 0x37, 0x1e, 0xb0, 0xa0, 0xcf, 0x3a, 0x5d, 0x16, 0xd4, 0xfb, 0x6d, 0x9b, 0xd3, 0x71, 0xe8,
	0xd6, 0xe5, 0x2e, 0x13, 0xed, 0x3a, 0x5d, 0x9f, 0x8e, 0xe8, 0x7c, 0xe9, 0xa9, 0xcf, 0xb6, 0x9e,
	0xd1, 0x48, 0x9e, 0xa1, 0xf1, 0xbe, 0x63, 0x6f, 0xc4, 0x0b, 0xcf, 0xce, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x70, 0x89, 0x1b, 0x07, 0x90, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectionQueryClient is the client API for ConnectionQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectionQueryClient interface {
	Connection(ctx context.Context, in *QueryConnectionRequest, opts ...grpc.CallOption) (*QueryConnectionResponse, error)
	Connections(ctx context.Context, in *QueryConnectionsRequest, opts ...grpc.CallOption) (*QueryConnectionsResponse, error)
	ClientConnections(ctx context.Context, in *QueryClientConnectionsRequest, opts ...grpc.CallOption) (*QueryClientConnectionsResponse, error)
	ConnectionClientState(ctx context.Context, in *QueryConnectionClientStateRequest, opts ...grpc.CallOption) (*QueryConnectionClientStateResponse, error)
	ConnectionConsensusState(ctx context.Context, in *QueryConnectionConsensusStateRequest, opts ...grpc.CallOption) (*QueryConnectionConsensusStateResponse, error)
}

type connectionQueryClient struct {
	cc grpc1.ClientConn
}

func NewConnectionQueryClient(cc grpc1.ClientConn) ConnectionQueryClient {
	return &connectionQueryClient{cc}
}

func (c *connectionQueryClient) Connection(ctx context.Context, in *QueryConnectionRequest, opts ...grpc.CallOption) (*QueryConnectionResponse, error) {
	out := new(QueryConnectionResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionQuery/Connection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionQueryClient) Connections(ctx context.Context, in *QueryConnectionsRequest, opts ...grpc.CallOption) (*QueryConnectionsResponse, error) {
	out := new(QueryConnectionsResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionQuery/Connections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionQueryClient) ClientConnections(ctx context.Context, in *QueryClientConnectionsRequest, opts ...grpc.CallOption) (*QueryClientConnectionsResponse, error) {
	out := new(QueryClientConnectionsResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionQuery/ClientConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionQueryClient) ConnectionClientState(ctx context.Context, in *QueryConnectionClientStateRequest, opts ...grpc.CallOption) (*QueryConnectionClientStateResponse, error) {
	out := new(QueryConnectionClientStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionQuery/ConnectionClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionQueryClient) ConnectionConsensusState(ctx context.Context, in *QueryConnectionConsensusStateRequest, opts ...grpc.CallOption) (*QueryConnectionConsensusStateResponse, error) {
	out := new(QueryConnectionConsensusStateResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionQuery/ConnectionConsensusState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionQueryServer is the server API for ConnectionQuery service.
type ConnectionQueryServer interface {
	Connection(context.Context, *QueryConnectionRequest) (*QueryConnectionResponse, error)
	Connections(context.Context, *QueryConnectionsRequest) (*QueryConnectionsResponse, error)
	ClientConnections(context.Context, *QueryClientConnectionsRequest) (*QueryClientConnectionsResponse, error)
	ConnectionClientState(context.Context, *QueryConnectionClientStateRequest) (*QueryConnectionClientStateResponse, error)
	ConnectionConsensusState(context.Context, *QueryConnectionConsensusStateRequest) (*QueryConnectionConsensusStateResponse, error)
}

// UnimplementedConnectionQueryServer can be embedded to have forward compatible implementations.
type UnimplementedConnectionQueryServer struct {
}

func (*UnimplementedConnectionQueryServer) Connection(ctx context.Context, req *QueryConnectionRequest) (*QueryConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connection not implemented")
}
func (*UnimplementedConnectionQueryServer) Connections(ctx context.Context, req *QueryConnectionsRequest) (*QueryConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connections not implemented")
}
func (*UnimplementedConnectionQueryServer) ClientConnections(ctx context.Context, req *QueryClientConnectionsRequest) (*QueryClientConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientConnections not implemented")
}
func (*UnimplementedConnectionQueryServer) ConnectionClientState(ctx context.Context, req *QueryConnectionClientStateRequest) (*QueryConnectionClientStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionClientState not implemented")
}
func (*UnimplementedConnectionQueryServer) ConnectionConsensusState(ctx context.Context, req *QueryConnectionConsensusStateRequest) (*QueryConnectionConsensusStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionConsensusState not implemented")
}

func RegisterConnectionQueryServer(s grpc1.Server, srv ConnectionQueryServer) {
	s.RegisterService(&_ConnectionQuery_serviceDesc, srv)
}

func _ConnectionQuery_Connection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionQueryServer).Connection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionQuery/Connection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionQueryServer).Connection(ctx, req.(*QueryConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionQuery_Connections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionQueryServer).Connections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionQuery/Connections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionQueryServer).Connections(ctx, req.(*QueryConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionQuery_ClientConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionQueryServer).ClientConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionQuery/ClientConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionQueryServer).ClientConnections(ctx, req.(*QueryClientConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionQuery_ConnectionClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConnectionClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionQueryServer).ConnectionClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionQuery/ConnectionClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionQueryServer).ConnectionClientState(ctx, req.(*QueryConnectionClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionQuery_ConnectionConsensusState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConnectionConsensusStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionQueryServer).ConnectionConsensusState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionQuery/ConnectionConsensusState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionQueryServer).ConnectionConsensusState(ctx, req.(*QueryConnectionConsensusStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectionQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.ConnectionQuery",
	HandlerType: (*ConnectionQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connection",
			Handler:    _ConnectionQuery_Connection_Handler,
		},
		{
			MethodName: "Connections",
			Handler:    _ConnectionQuery_Connections_Handler,
		},
		{
			MethodName: "ClientConnections",
			Handler:    _ConnectionQuery_ClientConnections_Handler,
		},
		{
			MethodName: "ConnectionClientState",
			Handler:    _ConnectionQuery_ConnectionClientState_Handler,
		},
		{
			MethodName: "ConnectionConsensusState",
			Handler:    _ConnectionQuery_ConnectionConsensusState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/query_connection.proto",
}

func (m *QueryConnectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientConnectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientConnectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientConnectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientConnectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientConnectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientConnectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionClientStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionClientStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionClientStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionClientStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionClientStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionClientStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionConsensusStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionConsensusStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionConsensusStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConnectionConsensusStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConnectionConsensusStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConnectionConsensusStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryConnection(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryConnection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryConnectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryClientConnectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryClientConnectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionClientStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionClientStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionConsensusStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func (m *QueryConnectionConsensusStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQueryConnection(uint64(l))
	}
	return n
}

func sovQueryConnection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryConnection(x uint64) (n int) {
	return sovQueryConnection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryConnectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.QueryConnectionRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.QueryConnectionResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.QueryConnectionsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.QueryConnectionsResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientConnectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientConnectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientConnectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.QueryClientConnectionsRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientConnectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientConnectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientConnectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.QueryClientConnectionsResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionClientStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionClientStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionClientStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.QueryConnectionClientStateRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionClientStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionClientStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionClientStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.QueryConnectionClientStateResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionConsensusStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionConsensusStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionConsensusStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.QueryConnectionConsensusStateRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConnectionConsensusStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConnectionConsensusStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConnectionConsensusStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.QueryConnectionConsensusStateResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryConnection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryConnection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryConnection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryConnection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryConnection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryConnection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryConnection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryConnection = fmt.Errorf("proto: unexpected end of group")
)
