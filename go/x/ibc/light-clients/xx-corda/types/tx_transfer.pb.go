// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/tx_transfer.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v4/modules/apps/transfer/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferRequest struct {
	Request *types.MsgTransfer `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef          `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebcdcc7e35734cd, []int{0}
}
func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetRequest() *types.MsgTransfer {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TransferRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type TransferResponse struct {
	Response *types.MsgTransferResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                     `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	Sequence uint64                     `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *TransferResponse) Reset()         { *m = TransferResponse{} }
func (m *TransferResponse) String() string { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()    {}
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ebcdcc7e35734cd, []int{1}
}
func (m *TransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponse.Merge(m, src)
}
func (m *TransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponse proto.InternalMessageInfo

func (m *TransferResponse) GetResponse() *types.MsgTransferResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TransferResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *TransferResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*TransferRequest)(nil), "ibc.lightclients.corda.v1.TransferRequest")
	proto.RegisterType((*TransferResponse)(nil), "ibc.lightclients.corda.v1.TransferResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/tx_transfer.proto", fileDescriptor_0ebcdcc7e35734cd)
}

var fileDescriptor_0ebcdcc7e35734cd = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xfb, 0x30,
	0x1c, 0xc6, 0x97, 0xdf, 0x9f, 0x6d, 0x64, 0x82, 0x12, 0x3c, 0xcc, 0x1e, 0xca, 0x98, 0x08, 0xd3,
	0xd1, 0x84, 0xce, 0xab, 0x27, 0x3d, 0x79, 0x18, 0x42, 0xf5, 0xe4, 0x65, 0xb4, 0x69, 0xd6, 0x05,
	0x6a, 0x53, 0x93, 0x6c, 0x74, 0xef, 0x42, 0xd0, 0x17, 0xe5, 0x71, 0x47, 0x8f, 0xb2, 0xbd, 0x11,
	0x69, 0xd3, 0xd6, 0x21, 0x38, 0x76, 0xfb, 0x7e, 0xe1, 0x79, 0x3e, 0x79, 0xbe, 0xed, 0x03, 0x87,
	0x3c, 0xa0, 0x24, 0xe6, 0xd1, 0x4c, 0xd3, 0x98, 0xb3, 0x44, 0x2b, 0x42, 0x85, 0x0c, 0x7d, 0xb2,
	0x70, 0x89, 0xce, 0x26, 0x5a, 0xfa, 0x89, 0x9a, 0x32, 0x89, 0x53, 0x29, 0xb4, 0x40, 0x27, 0x3c,
	0xa0, 0x78, 0x5b, 0x8c, 0x0b, 0x31, 0x5e, 0xb8, 0xd6, 0x59, 0xce, 0xf1, 0xd3, 0x34, 0xe6, 0xd4,
	0xd7, 0x5c, 0x24, 0x8a, 0x54, 0x5e, 0x83, 0x32, 0x04, 0x6b, 0xc7, 0x73, 0xc5, 0xe0, 0xe8, 0x65,
	0xca, 0x94, 0x11, 0xf7, 0xdf, 0x00, 0x3c, 0x7c, 0x28, 0x29, 0x1e, 0x7b, 0x9e, 0x33, 0xa5, 0xd1,
	0x0d, 0x6c, 0x49, 0x33, 0x76, 0x41, 0x0f, 0x0c, 0x3a, 0xa3, 0x73, 0x9c, 0x87, 0xda, 0x7e, 0x19,
	0xd7, 0xa9, 0x17, 0x2e, 0x1e, 0xab, 0xa8, 0x46, 0x54, 0x4e, 0x74, 0x05, 0x5b, 0x81, 0xaf, 0xd8,
	0x84, 0x87, 0xdd, 0x3f, 0x05, 0xe4, 0x14, 0xff, 0x7a, 0x19, 0xbe, 0xd7, 0xbe, 0x66, 0x1e, 0x9b,
	0x7a, 0xcd, 0xdc, 0x73, 0x1b, 0xf6, 0x5f, 0x01, 0x3c, 0xfa, 0x8e, 0xa5, 0x52, 0x91, 0x28, 0x86,
	0xc6, 0xb0, 0x2d, 0xcb, 0xb9, 0x0c, 0xe6, 0xee, 0x1f, 0xac, 0x34, 0x7a, 0x35, 0x02, 0x1d, 0xc3,
	0xff, 0xa9, 0x14, 0x62, 0x5a, 0xe4, 0x3b, 0xf0, 0xcc, 0x82, 0x2c, 0xd8, 0x56, 0xf9, 0x09, 0x09,
	0x65, 0xdd, 0xbf, 0x3d, 0x30, 0xf8, 0xe7, 0xd5, 0xfb, 0x48, 0xc2, 0x4e, 0xc5, 0x1b, 0xab, 0x08,
	0x51, 0xd8, 0xae, 0x56, 0x74, 0xb1, 0xe3, 0xba, 0x1f, 0xdf, 0xd7, 0x1a, 0xee, 0xa5, 0x35, 0x29,
	0xaf, 0xf9, 0xfb, 0xda, 0x06, 0xab, 0xb5, 0x0d, 0x3e, 0xd7, 0x36, 0x78, 0xd9, 0xd8, 0x8d, 0xd5,
	0xc6, 0x6e, 0x7c, 0x6c, 0xec, 0xc6, 0xe3, 0x5d, 0xc4, 0xf5, 0x6c, 0x1e, 0x60, 0x2a, 0x9e, 0xc8,
	0x6c, 0x99, 0x32, 0x19, 0xb3, 0x30, 0x62, 0xd2, 0x89, 0xfd, 0x40, 0x91, 0xe5, 0x9c, 0x3b, 0xe6,
	0x6f, 0xe7, 0x6d, 0x88, 0x04, 0xc9, 0x48, 0x5d, 0x0b, 0xa7, 0xea, 0x45, 0x96, 0x19, 0x0d, 0x29,
	0x1a, 0x11, 0x34, 0x8b, 0x4a, 0x5c, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x13, 0x8a, 0x9d,
	0xb0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransferMsgClient is the client API for TransferMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferMsgClient interface {
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type transferMsgClient struct {
	cc grpc1.ClientConn
}

func NewTransferMsgClient(cc grpc1.ClientConn) TransferMsgClient {
	return &transferMsgClient{cc}
}

func (c *transferMsgClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.TransferMsg/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferMsgServer is the server API for TransferMsg service.
type TransferMsgServer interface {
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
}

// UnimplementedTransferMsgServer can be embedded to have forward compatible implementations.
type UnimplementedTransferMsgServer struct {
}

func (*UnimplementedTransferMsgServer) Transfer(ctx context.Context, req *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}

func RegisterTransferMsgServer(s grpc1.Server, srv TransferMsgServer) {
	s.RegisterService(&_TransferMsg_serviceDesc, srv)
}

func _TransferMsg_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferMsgServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.TransferMsg/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferMsgServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransferMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.TransferMsg",
	HandlerType: (*TransferMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _TransferMsg_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/tx_transfer.proto",
}

func (m *TransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTransfer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTransfer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTxTransfer(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxTransfer(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTransfer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxTransfer(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxTransfer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxTransfer(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxTransfer(uint64(l))
	}
	return n
}

func (m *TransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxTransfer(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxTransfer(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovTxTransfer(uint64(m.Sequence))
	}
	return n
}

func sovTxTransfer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxTransfer(x uint64) (n int) {
	return sovTxTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgTransfer{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgTransferResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxTransfer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxTransfer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxTransfer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxTransfer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxTransfer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxTransfer = fmt.Errorf("proto: unexpected end of group")
)
