// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/host.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Host struct {
	Participants           []*Party  `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId                 *StateRef `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Notary                 *Party    `protobuf:"bytes,3,opt,name=notary,proto3" json:"notary,omitempty"`
	NextClientSequence     uint64    `protobuf:"varint,4,opt,name=nextClientSequence,proto3" json:"nextClientSequence,omitempty"`
	NextConnectionSequence uint64    `protobuf:"varint,5,opt,name=nextConnectionSequence,proto3" json:"nextConnectionSequence,omitempty"`
	NextChannelSequence    uint64    `protobuf:"varint,6,opt,name=nextChannelSequence,proto3" json:"nextChannelSequence,omitempty"`
	BankIds                []string  `protobuf:"bytes,7,rep,name=bank_ids,json=bankIds,proto3" json:"bank_ids,omitempty"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a17a943ca31e48, []int{0}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Host) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *Host) GetNotary() *Party {
	if m != nil {
		return m.Notary
	}
	return nil
}

func (m *Host) GetNextClientSequence() uint64 {
	if m != nil {
		return m.NextClientSequence
	}
	return 0
}

func (m *Host) GetNextConnectionSequence() uint64 {
	if m != nil {
		return m.NextConnectionSequence
	}
	return 0
}

func (m *Host) GetNextChannelSequence() uint64 {
	if m != nil {
		return m.NextChannelSequence
	}
	return 0
}

func (m *Host) GetBankIds() []string {
	if m != nil {
		return m.BankIds
	}
	return nil
}

type CreateHostRequest struct {
	BaseId *StateRef `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *CreateHostRequest) Reset()         { *m = CreateHostRequest{} }
func (m *CreateHostRequest) String() string { return proto.CompactTextString(m) }
func (*CreateHostRequest) ProtoMessage()    {}
func (*CreateHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a17a943ca31e48, []int{1}
}
func (m *CreateHostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateHostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateHostRequest.Merge(m, src)
}
func (m *CreateHostRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateHostRequest proto.InternalMessageInfo

func (m *CreateHostRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type CreateHostResponse struct {
	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *CreateHostResponse) Reset()         { *m = CreateHostResponse{} }
func (m *CreateHostResponse) String() string { return proto.CompactTextString(m) }
func (*CreateHostResponse) ProtoMessage()    {}
func (*CreateHostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a17a943ca31e48, []int{2}
}
func (m *CreateHostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateHostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateHostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateHostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateHostResponse.Merge(m, src)
}
func (m *CreateHostResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateHostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateHostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateHostResponse proto.InternalMessageInfo

func (m *CreateHostResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type QueryHostRequest struct {
	BaseId *StateRef `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *QueryHostRequest) Reset()         { *m = QueryHostRequest{} }
func (m *QueryHostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostRequest) ProtoMessage()    {}
func (*QueryHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a17a943ca31e48, []int{3}
}
func (m *QueryHostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostRequest.Merge(m, src)
}
func (m *QueryHostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostRequest proto.InternalMessageInfo

func (m *QueryHostRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type QueryHostResponse struct {
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (m *QueryHostResponse) Reset()         { *m = QueryHostResponse{} }
func (m *QueryHostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostResponse) ProtoMessage()    {}
func (*QueryHostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49a17a943ca31e48, []int{4}
}
func (m *QueryHostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostResponse.Merge(m, src)
}
func (m *QueryHostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostResponse proto.InternalMessageInfo

func (m *QueryHostResponse) GetHost() *Host {
	if m != nil {
		return m.Host
	}
	return nil
}

func init() {
	proto.RegisterType((*Host)(nil), "ibc.lightclients.corda.v1.Host")
	proto.RegisterType((*CreateHostRequest)(nil), "ibc.lightclients.corda.v1.CreateHostRequest")
	proto.RegisterType((*CreateHostResponse)(nil), "ibc.lightclients.corda.v1.CreateHostResponse")
	proto.RegisterType((*QueryHostRequest)(nil), "ibc.lightclients.corda.v1.QueryHostRequest")
	proto.RegisterType((*QueryHostResponse)(nil), "ibc.lightclients.corda.v1.QueryHostResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/host.proto", fileDescriptor_49a17a943ca31e48)
}

var fileDescriptor_49a17a943ca31e48 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xeb, 0x26, 0x4d, 0xc8, 0x4b, 0x07, 0x7a, 0x20, 0xe4, 0x66, 0x30, 0x56, 0x60, 0x88,
	0x68, 0x6d, 0xd3, 0x54, 0x42, 0x0c, 0x4c, 0x2d, 0x43, 0x3b, 0x91, 0x3a, 0x1b, 0x4b, 0x75, 0xb6,
	0x5f, 0xe2, 0x13, 0xe6, 0xce, 0xdc, 0x5d, 0xa2, 0xf8, 0x5b, 0xf0, 0xb1, 0x18, 0x3b, 0x32, 0x56,
	0xc9, 0xa7, 0x60, 0x43, 0x3e, 0x87, 0x10, 0xa0, 0x09, 0x45, 0x62, 0xf3, 0xf3, 0xfb, 0xff, 0xfe,
	0xcf, 0xf7, 0x7c, 0x7f, 0x78, 0xce, 0xa2, 0x38, 0xc8, 0xd8, 0x38, 0xd5, 0x71, 0xc6, 0x90, 0x6b,
	0x15, 0xc4, 0x42, 0x26, 0x34, 0x98, 0x9e, 0x04, 0xa9, 0x50, 0xda, 0xcf, 0xa5, 0xd0, 0x82, 0x1c,
	0xb2, 0x28, 0xf6, 0xd7, 0x55, 0xbe, 0x51, 0xf9, 0xd3, 0x93, 0xce, 0xd1, 0x66, 0x03, 0xf3, 0xe0,
	0xe9, 0x22, 0x47, 0x55, 0xf9, 0x74, 0xbf, 0xed, 0x42, 0xfd, 0x42, 0x28, 0x4d, 0xde, 0xc2, 0x7e,
	0x4e, 0xa5, 0x66, 0x31, 0xcb, 0x29, 0xd7, 0xca, 0xb6, 0xdc, 0x5a, 0xaf, 0xdd, 0x77, 0xfd, 0x8d,
	0x73, 0xfc, 0x01, 0x95, 0xba, 0x08, 0x7f, 0xa1, 0xc8, 0x1b, 0x68, 0x46, 0x54, 0xe1, 0x35, 0x4b,
	0xec, 0x5d, 0xd7, 0xea, 0xb5, 0xfb, 0xcf, 0xb6, 0x18, 0x0c, 0x35, 0xd5, 0x18, 0xe2, 0x28, 0x6c,
	0x94, 0xcc, 0x65, 0x42, 0x5e, 0x43, 0x83, 0x0b, 0x4d, 0x65, 0x61, 0xd7, 0x0c, 0xfc, 0xf7, 0xe9,
	0x4b, 0x3d, 0xf1, 0x81, 0x70, 0x9c, 0xe9, 0x73, 0xa3, 0x1a, 0xe2, 0xa7, 0x09, 0xf2, 0x18, 0xed,
	0xba, 0x6b, 0xf5, 0xea, 0xe1, 0x1d, 0x1d, 0xf2, 0x0a, 0x9e, 0x98, 0xb7, 0x82, 0x73, 0x8c, 0x35,
	0x13, 0x7c, 0xc5, 0xec, 0x19, 0x66, 0x43, 0x97, 0xbc, 0x84, 0x47, 0xa6, 0x93, 0x52, 0xce, 0x31,
	0x5b, 0x41, 0x0d, 0x03, 0xdd, 0xd5, 0x22, 0x87, 0xf0, 0x20, 0xa2, 0xfc, 0xc3, 0x35, 0x4b, 0x94,
	0xdd, 0x74, 0x6b, 0xbd, 0x56, 0xd8, 0x2c, 0xeb, 0xcb, 0x44, 0x75, 0xaf, 0xe0, 0xe0, 0x5c, 0x22,
	0xd5, 0x58, 0xfe, 0x80, 0xb0, 0x04, 0x94, 0x5e, 0xdf, 0xa0, 0xf5, 0xcf, 0x1b, 0xec, 0xbe, 0x00,
	0xb2, 0x6e, 0xa9, 0x72, 0xc1, 0x15, 0x92, 0xc7, 0xb0, 0x97, 0x4b, 0x21, 0x46, 0xc6, 0x71, 0x3f,
	0xac, 0x8a, 0xee, 0x00, 0x1e, 0x5e, 0x4d, 0x50, 0x16, 0xff, 0x6f, 0xfa, 0x05, 0x1c, 0xac, 0x39,
	0x2e, 0x87, 0x9f, 0x42, 0xbd, 0xbc, 0xb7, 0x4b, 0xbf, 0xa7, 0x5b, 0xfc, 0x0c, 0x66, 0xc4, 0xfd,
	0x5b, 0x0b, 0xda, 0x65, 0x39, 0x44, 0x39, 0x65, 0x31, 0x12, 0x06, 0xf0, 0xf3, 0x5c, 0xe4, 0x78,
	0x8b, 0xc9, 0x1f, 0x1b, 0xed, 0x78, 0xf7, 0x54, 0x2f, 0xbf, 0x77, 0x04, 0xad, 0xd5, 0x21, 0xc8,
	0xd1, 0x16, 0xf6, 0xf7, 0xe5, 0x75, 0x8e, 0xef, 0x27, 0xae, 0xe6, 0x9c, 0xe9, 0x2f, 0x73, 0xc7,
	0xba, 0x99, 0x3b, 0xd6, 0xed, 0xdc, 0xb1, 0x3e, 0x2f, 0x9c, 0x9d, 0x9b, 0x85, 0xb3, 0xf3, 0x75,
	0xe1, 0xec, 0x9c, 0xb5, 0x4a, 0xdd, 0xa0, 0x8c, 0xe7, 0xfb, 0x77, 0x63, 0xa6, 0xd3, 0x49, 0xe4,
	0xc7, 0xe2, 0x63, 0x90, 0x16, 0x39, 0xca, 0x0c, 0x93, 0x31, 0x4a, 0x2f, 0xa3, 0x91, 0x0a, 0x8a,
	0x09, 0xf3, 0xaa, 0x44, 0x97, 0x89, 0x1f, 0x8b, 0x60, 0x16, 0xac, 0xa2, 0xef, 0xfd, 0xc8, 0xfe,
	0x6c, 0x56, 0x69, 0x02, 0x93, 0xfa, 0xa8, 0x61, 0x62, 0x7f, 0xfa, 0x3d, 0x00, 0x00, 0xff, 0xff,
	0xba, 0xd3, 0x11, 0x7f, 0x66, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostServiceClient interface {
	// transactions
	CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*CreateHostResponse, error)
	// queries
	QueryHost(ctx context.Context, in *QueryHostRequest, opts ...grpc.CallOption) (*QueryHostResponse, error)
}

type hostServiceClient struct {
	cc grpc1.ClientConn
}

func NewHostServiceClient(cc grpc1.ClientConn) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*CreateHostResponse, error) {
	out := new(CreateHostResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.HostService/CreateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) QueryHost(ctx context.Context, in *QueryHostRequest, opts ...grpc.CallOption) (*QueryHostResponse, error) {
	out := new(QueryHostResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.HostService/QueryHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
type HostServiceServer interface {
	// transactions
	CreateHost(context.Context, *CreateHostRequest) (*CreateHostResponse, error)
	// queries
	QueryHost(context.Context, *QueryHostRequest) (*QueryHostResponse, error)
}

// UnimplementedHostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (*UnimplementedHostServiceServer) CreateHost(ctx context.Context, req *CreateHostRequest) (*CreateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (*UnimplementedHostServiceServer) QueryHost(ctx context.Context, req *QueryHostRequest) (*QueryHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHost not implemented")
}

func RegisterHostServiceServer(s grpc1.Server, srv HostServiceServer) {
	s.RegisterService(&_HostService_serviceDesc, srv)
}

func _HostService_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.HostService/CreateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CreateHost(ctx, req.(*CreateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_QueryHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).QueryHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.HostService/QueryHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).QueryHost(ctx, req.(*QueryHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHost",
			Handler:    _HostService_CreateHost_Handler,
		},
		{
			MethodName: "QueryHost",
			Handler:    _HostService_QueryHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/host.proto",
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BankIds) > 0 {
		for iNdEx := len(m.BankIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BankIds[iNdEx])
			copy(dAtA[i:], m.BankIds[iNdEx])
			i = encodeVarintHost(dAtA, i, uint64(len(m.BankIds[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.NextChannelSequence != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.NextChannelSequence))
		i--
		dAtA[i] = 0x30
	}
	if m.NextConnectionSequence != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.NextConnectionSequence))
		i--
		dAtA[i] = 0x28
	}
	if m.NextClientSequence != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.NextClientSequence))
		i--
		dAtA[i] = 0x20
	}
	if m.Notary != nil {
		{
			size, err := m.Notary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHost(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateHostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateHostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateHostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateHostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Host != nil {
		{
			size, err := m.Host.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHost(dAtA []byte, offset int, v uint64) int {
	offset -= sovHost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovHost(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.Notary != nil {
		l = m.Notary.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.NextClientSequence != 0 {
		n += 1 + sovHost(uint64(m.NextClientSequence))
	}
	if m.NextConnectionSequence != 0 {
		n += 1 + sovHost(uint64(m.NextConnectionSequence))
	}
	if m.NextChannelSequence != 0 {
		n += 1 + sovHost(uint64(m.NextChannelSequence))
	}
	if len(m.BankIds) > 0 {
		for _, s := range m.BankIds {
			l = len(s)
			n += 1 + l + sovHost(uint64(l))
		}
	}
	return n
}

func (m *CreateHostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}

func (m *CreateHostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}

func (m *QueryHostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}

func (m *QueryHostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Host != nil {
		l = m.Host.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	return n
}

func sovHost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHost(x uint64) (n int) {
	return sovHost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notary == nil {
				m.Notary = &Party{}
			}
			if err := m.Notary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextClientSequence", wireType)
			}
			m.NextClientSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextClientSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextConnectionSequence", wireType)
			}
			m.NextConnectionSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextConnectionSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextChannelSequence", wireType)
			}
			m.NextChannelSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextChannelSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankIds = append(m.BankIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Host == nil {
				m.Host = &Host{}
			}
			if err := m.Host.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHost
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHost
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHost
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHost        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHost          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHost = fmt.Errorf("proto: unexpected end of group")
)
