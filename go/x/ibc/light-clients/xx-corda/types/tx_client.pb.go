// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/tx_client.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v4/modules/core/02-client/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateClientRequest struct {
	Request *types.MsgCreateClient `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef              `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *CreateClientRequest) Reset()         { *m = CreateClientRequest{} }
func (m *CreateClientRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClientRequest) ProtoMessage()    {}
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{0}
}
func (m *CreateClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClientRequest.Merge(m, src)
}
func (m *CreateClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClientRequest proto.InternalMessageInfo

func (m *CreateClientRequest) GetRequest() *types.MsgCreateClient {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *CreateClientRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type CreateClientResponse struct {
	Response *types.MsgCreateClientResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                         `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	ClientId string                         `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *CreateClientResponse) Reset()         { *m = CreateClientResponse{} }
func (m *CreateClientResponse) String() string { return proto.CompactTextString(m) }
func (*CreateClientResponse) ProtoMessage()    {}
func (*CreateClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{1}
}
func (m *CreateClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClientResponse.Merge(m, src)
}
func (m *CreateClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClientResponse proto.InternalMessageInfo

func (m *CreateClientResponse) GetResponse() *types.MsgCreateClientResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *CreateClientResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *CreateClientResponse) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type UpdateClientRequest struct {
	Request *types.MsgUpdateClient `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef              `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *UpdateClientRequest) Reset()         { *m = UpdateClientRequest{} }
func (m *UpdateClientRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClientRequest) ProtoMessage()    {}
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{2}
}
func (m *UpdateClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClientRequest.Merge(m, src)
}
func (m *UpdateClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClientRequest proto.InternalMessageInfo

func (m *UpdateClientRequest) GetRequest() *types.MsgUpdateClient {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpdateClientRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type UpdateClientResponse struct {
	Response *types.MsgUpdateClientResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                         `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *UpdateClientResponse) Reset()         { *m = UpdateClientResponse{} }
func (m *UpdateClientResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateClientResponse) ProtoMessage()    {}
func (*UpdateClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{3}
}
func (m *UpdateClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClientResponse.Merge(m, src)
}
func (m *UpdateClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClientResponse proto.InternalMessageInfo

func (m *UpdateClientResponse) GetResponse() *types.MsgUpdateClientResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *UpdateClientResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type UpgradeClientRequest struct {
	Request *types.MsgUpgradeClient `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef               `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *UpgradeClientRequest) Reset()         { *m = UpgradeClientRequest{} }
func (m *UpgradeClientRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeClientRequest) ProtoMessage()    {}
func (*UpgradeClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{4}
}
func (m *UpgradeClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClientRequest.Merge(m, src)
}
func (m *UpgradeClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClientRequest proto.InternalMessageInfo

func (m *UpgradeClientRequest) GetRequest() *types.MsgUpgradeClient {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpgradeClientRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type UpgradeClientResponse struct {
	Response *types.MsgUpgradeClientResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                          `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *UpgradeClientResponse) Reset()         { *m = UpgradeClientResponse{} }
func (m *UpgradeClientResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeClientResponse) ProtoMessage()    {}
func (*UpgradeClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{5}
}
func (m *UpgradeClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClientResponse.Merge(m, src)
}
func (m *UpgradeClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClientResponse proto.InternalMessageInfo

func (m *UpgradeClientResponse) GetResponse() *types.MsgUpgradeClientResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *UpgradeClientResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type SubmitMisbehaviourRequest struct {
	Request *types.MsgSubmitMisbehaviour `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                    `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *SubmitMisbehaviourRequest) Reset()         { *m = SubmitMisbehaviourRequest{} }
func (m *SubmitMisbehaviourRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitMisbehaviourRequest) ProtoMessage()    {}
func (*SubmitMisbehaviourRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{6}
}
func (m *SubmitMisbehaviourRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitMisbehaviourRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitMisbehaviourRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitMisbehaviourRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitMisbehaviourRequest.Merge(m, src)
}
func (m *SubmitMisbehaviourRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitMisbehaviourRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitMisbehaviourRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitMisbehaviourRequest proto.InternalMessageInfo

func (m *SubmitMisbehaviourRequest) GetRequest() *types.MsgSubmitMisbehaviour {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubmitMisbehaviourRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type SubmitMisbehaviourResponse struct {
	Response *types.MsgSubmitMisbehaviourResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                               `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *SubmitMisbehaviourResponse) Reset()         { *m = SubmitMisbehaviourResponse{} }
func (m *SubmitMisbehaviourResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitMisbehaviourResponse) ProtoMessage()    {}
func (*SubmitMisbehaviourResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f7f5ff2319fe5e6, []int{7}
}
func (m *SubmitMisbehaviourResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitMisbehaviourResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitMisbehaviourResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitMisbehaviourResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitMisbehaviourResponse.Merge(m, src)
}
func (m *SubmitMisbehaviourResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitMisbehaviourResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitMisbehaviourResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitMisbehaviourResponse proto.InternalMessageInfo

func (m *SubmitMisbehaviourResponse) GetResponse() *types.MsgSubmitMisbehaviourResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SubmitMisbehaviourResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateClientRequest)(nil), "ibc.lightclients.corda.v1.CreateClientRequest")
	proto.RegisterType((*CreateClientResponse)(nil), "ibc.lightclients.corda.v1.CreateClientResponse")
	proto.RegisterType((*UpdateClientRequest)(nil), "ibc.lightclients.corda.v1.UpdateClientRequest")
	proto.RegisterType((*UpdateClientResponse)(nil), "ibc.lightclients.corda.v1.UpdateClientResponse")
	proto.RegisterType((*UpgradeClientRequest)(nil), "ibc.lightclients.corda.v1.UpgradeClientRequest")
	proto.RegisterType((*UpgradeClientResponse)(nil), "ibc.lightclients.corda.v1.UpgradeClientResponse")
	proto.RegisterType((*SubmitMisbehaviourRequest)(nil), "ibc.lightclients.corda.v1.SubmitMisbehaviourRequest")
	proto.RegisterType((*SubmitMisbehaviourResponse)(nil), "ibc.lightclients.corda.v1.SubmitMisbehaviourResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/tx_client.proto", fileDescriptor_7f7f5ff2319fe5e6)
}

var fileDescriptor_7f7f5ff2319fe5e6 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x6b, 0x26, 0xb6, 0xd5, 0x94, 0x8b, 0x57, 0xa4, 0x2d, 0x93, 0xa2, 0x69, 0x70, 0xd8,
	0x34, 0x6a, 0xd3, 0x01, 0x37, 0xe0, 0x40, 0x0f, 0xc0, 0xa1, 0x42, 0xca, 0xc4, 0x85, 0xcb, 0x94,
	0x3f, 0x5e, 0x6a, 0xa9, 0x9b, 0x83, 0xed, 0x94, 0xf6, 0xb8, 0x6f, 0x80, 0x10, 0x67, 0x3e, 0x0f,
	0xc7, 0x1d, 0x39, 0xa2, 0x56, 0x7c, 0x0f, 0x94, 0xd8, 0x9d, 0x92, 0x36, 0x09, 0xe9, 0xd4, 0x9b,
	0xeb, 0xbe, 0x8f, 0x9f, 0x9f, 0x9f, 0xfa, 0xed, 0x0b, 0x8f, 0x99, 0xe7, 0x93, 0x21, 0x0b, 0x07,
	0xca, 0x1f, 0x32, 0x7a, 0xa5, 0x24, 0xf1, 0xb9, 0x08, 0x5c, 0x32, 0xea, 0x12, 0x35, 0x3e, 0xd7,
	0x7b, 0x38, 0x12, 0x5c, 0x71, 0xb4, 0xc7, 0x3c, 0x1f, 0x67, 0x4b, 0x71, 0x5a, 0x8a, 0x47, 0x5d,
	0x6b, 0x3f, 0x39, 0xc5, 0xe7, 0x82, 0x12, 0xfd, 0x95, 0x96, 0x6b, 0x9d, 0x75, 0x52, 0x6e, 0x91,
	0x2e, 0x3a, 0x6a, 0x12, 0x51, 0xa9, 0x8b, 0x0f, 0xbf, 0x03, 0xb8, 0xd3, 0x13, 0xd4, 0x55, 0xb4,
	0x97, 0x16, 0x3b, 0xf4, 0x4b, 0x4c, 0xa5, 0x42, 0xaf, 0xe1, 0x96, 0xd0, 0xcb, 0x5d, 0x70, 0x00,
	0x8e, 0x1e, 0x9c, 0x3e, 0xc6, 0x09, 0x4e, 0xe2, 0x89, 0x0d, 0xe5, 0xa8, 0x8b, 0xfb, 0x32, 0xcc,
	0x89, 0xe7, 0x1a, 0xf4, 0x0a, 0x6e, 0x79, 0xae, 0xa4, 0xe7, 0x2c, 0xd8, 0xbd, 0x97, 0x91, 0x17,
	0xde, 0x06, 0x9f, 0x29, 0x57, 0x51, 0x87, 0x5e, 0x38, 0x9b, 0x89, 0xe6, 0x43, 0x90, 0x40, 0xb5,
	0xf3, 0x50, 0x32, 0xe2, 0x57, 0x92, 0xa2, 0x77, 0x70, 0x5b, 0x98, 0xb5, 0xc1, 0x3a, 0xa9, 0x83,
	0x65, 0x24, 0xce, 0xad, 0x18, 0xb5, 0xe1, 0xfd, 0x48, 0x70, 0x7e, 0x91, 0xd2, 0xb5, 0x1c, 0xfd,
	0x01, 0xed, 0xc3, 0xa6, 0x3e, 0x24, 0xe1, 0xde, 0x38, 0x00, 0x47, 0x4d, 0x67, 0x5b, 0x6f, 0x68,
	0xa8, 0x9d, 0x4f, 0x51, 0x70, 0xf7, 0xa4, 0x72, 0xe2, 0x35, 0x25, 0x15, 0xc3, 0x76, 0x9e, 0x69,
	0xe5, 0xa0, 0x8a, 0xe4, 0xff, 0x0b, 0xea, 0xf0, 0x07, 0x48, 0x7c, 0x43, 0xe1, 0x06, 0x0b, 0x61,
	0xbc, 0x59, 0x0c, 0xe3, 0x49, 0xa9, 0x6d, 0x56, 0xbd, 0xa6, 0x34, 0xbe, 0xc2, 0x47, 0x0b, 0x54,
	0xe6, 0x16, 0xef, 0x97, 0xe2, 0x78, 0x5a, 0x8b, 0xab, 0x6e, 0x1e, 0x3f, 0x01, 0xdc, 0x3b, 0x8b,
	0xbd, 0x4b, 0xa6, 0xfa, 0x4c, 0x7a, 0x74, 0xe0, 0x8e, 0x18, 0x8f, 0xc5, 0x3c, 0x94, 0xde, 0x62,
	0x28, 0xc7, 0x25, 0xe6, 0x05, 0x47, 0xac, 0x29, 0x99, 0x6b, 0x00, 0xad, 0x22, 0x40, 0x73, 0xab,
	0xfe, 0x52, 0x3e, 0xdd, 0xfa, 0x88, 0x35, 0x43, 0x3a, 0xfd, 0xbb, 0x01, 0x9b, 0x3a, 0xd7, 0xbe,
	0x0c, 0x11, 0x87, 0xad, 0x6c, 0x8f, 0x22, 0x5c, 0x71, 0x9d, 0x82, 0x3f, 0x28, 0x8b, 0xd4, 0xae,
	0x37, 0x50, 0x1c, 0xb6, 0xb2, 0x6f, 0xbd, 0xd2, 0xb0, 0xa0, 0xcf, 0x2b, 0x0d, 0x0b, 0x7b, 0x50,
	0xc0, 0x87, 0xb9, 0xd7, 0x84, 0xaa, 0x4f, 0x58, 0xee, 0x26, 0xeb, 0x59, 0x7d, 0x81, 0xf1, 0xbc,
	0x06, 0x10, 0x2d, 0xff, 0x44, 0xe8, 0x45, 0xd5, 0x5b, 0x29, 0x7b, 0xb7, 0xd6, 0xcb, 0x15, 0x55,
	0x9a, 0xe1, 0x2d, 0xfb, 0x35, 0xb5, 0xc1, 0xcd, 0xd4, 0x06, 0x7f, 0xa6, 0x36, 0xf8, 0x36, 0xb3,
	0x1b, 0x37, 0x33, 0xbb, 0xf1, 0x7b, 0x66, 0x37, 0x3e, 0x7f, 0x0c, 0x99, 0x1a, 0xc4, 0x1e, 0xf6,
	0xf9, 0x25, 0x19, 0x4c, 0x22, 0x2a, 0x86, 0x34, 0x08, 0xa9, 0xe8, 0x0c, 0x5d, 0x4f, 0x92, 0x49,
	0xcc, 0x3a, 0x7a, 0x3e, 0x25, 0xf3, 0x2b, 0xe4, 0x64, 0x4c, 0x6e, 0x07, 0x59, 0x67, 0x3e, 0xc9,
	0xc6, 0x63, 0x5d, 0x43, 0xd2, 0x19, 0xe6, 0x6d, 0xa6, 0x43, 0xec, 0xf9, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x00, 0xcf, 0x88, 0x20, 0x56, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientMsgClient is the client API for ClientMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientMsgClient interface {
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error)
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*UpdateClientResponse, error)
	UpgradeClient(ctx context.Context, in *UpgradeClientRequest, opts ...grpc.CallOption) (*UpgradeClientResponse, error)
	SubmitMisbehaviour(ctx context.Context, in *SubmitMisbehaviourRequest, opts ...grpc.CallOption) (*SubmitMisbehaviourResponse, error)
}

type clientMsgClient struct {
	cc grpc1.ClientConn
}

func NewClientMsgClient(cc grpc1.ClientConn) ClientMsgClient {
	return &clientMsgClient{cc}
}

func (c *clientMsgClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error) {
	out := new(CreateClientResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ClientMsg/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMsgClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*UpdateClientResponse, error) {
	out := new(UpdateClientResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ClientMsg/UpdateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMsgClient) UpgradeClient(ctx context.Context, in *UpgradeClientRequest, opts ...grpc.CallOption) (*UpgradeClientResponse, error) {
	out := new(UpgradeClientResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ClientMsg/UpgradeClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientMsgClient) SubmitMisbehaviour(ctx context.Context, in *SubmitMisbehaviourRequest, opts ...grpc.CallOption) (*SubmitMisbehaviourResponse, error) {
	out := new(SubmitMisbehaviourResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ClientMsg/SubmitMisbehaviour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientMsgServer is the server API for ClientMsg service.
type ClientMsgServer interface {
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	UpdateClient(context.Context, *UpdateClientRequest) (*UpdateClientResponse, error)
	UpgradeClient(context.Context, *UpgradeClientRequest) (*UpgradeClientResponse, error)
	SubmitMisbehaviour(context.Context, *SubmitMisbehaviourRequest) (*SubmitMisbehaviourResponse, error)
}

// UnimplementedClientMsgServer can be embedded to have forward compatible implementations.
type UnimplementedClientMsgServer struct {
}

func (*UnimplementedClientMsgServer) CreateClient(ctx context.Context, req *CreateClientRequest) (*CreateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedClientMsgServer) UpdateClient(ctx context.Context, req *UpdateClientRequest) (*UpdateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (*UnimplementedClientMsgServer) UpgradeClient(ctx context.Context, req *UpgradeClientRequest) (*UpgradeClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeClient not implemented")
}
func (*UnimplementedClientMsgServer) SubmitMisbehaviour(ctx context.Context, req *SubmitMisbehaviourRequest) (*SubmitMisbehaviourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMisbehaviour not implemented")
}

func RegisterClientMsgServer(s grpc1.Server, srv ClientMsgServer) {
	s.RegisterService(&_ClientMsg_serviceDesc, srv)
}

func _ClientMsg_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMsgServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ClientMsg/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMsgServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMsg_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMsgServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ClientMsg/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMsgServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMsg_UpgradeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMsgServer).UpgradeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ClientMsg/UpgradeClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMsgServer).UpgradeClient(ctx, req.(*UpgradeClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientMsg_SubmitMisbehaviour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMisbehaviourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientMsgServer).SubmitMisbehaviour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ClientMsg/SubmitMisbehaviour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientMsgServer).SubmitMisbehaviour(ctx, req.(*SubmitMisbehaviourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.ClientMsg",
	HandlerType: (*ClientMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ClientMsg_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientMsg_UpdateClient_Handler,
		},
		{
			MethodName: "UpgradeClient",
			Handler:    _ClientMsg_UpgradeClient_Handler,
		},
		{
			MethodName: "SubmitMisbehaviour",
			Handler:    _ClientMsg_SubmitMisbehaviour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/tx_client.proto",
}

func (m *CreateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTxClient(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxClient(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxClient(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxClient(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitMisbehaviourRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitMisbehaviourRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitMisbehaviourRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitMisbehaviourResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitMisbehaviourResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitMisbehaviourResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxClient(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxClient(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxClient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *CreateClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxClient(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *UpdateClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *UpdateClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *UpgradeClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *UpgradeClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *SubmitMisbehaviourRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func (m *SubmitMisbehaviourResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxClient(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxClient(uint64(l))
	}
	return n
}

func sovTxClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxClient(x uint64) (n int) {
	return sovTxClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgCreateClient{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgCreateClientResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgUpdateClient{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgUpdateClientResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgUpgradeClient{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgUpgradeClientResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitMisbehaviourRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitMisbehaviourRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitMisbehaviourRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgSubmitMisbehaviour{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitMisbehaviourResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitMisbehaviourResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitMisbehaviourResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgSubmitMisbehaviourResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxClient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxClient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxClient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxClient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxClient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxClient = fmt.Errorf("proto: unexpected end of group")
)
