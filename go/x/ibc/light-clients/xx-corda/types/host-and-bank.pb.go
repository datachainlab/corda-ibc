// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/host-and-bank.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllocateFundRequest struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *AllocateFundRequest) Reset()         { *m = AllocateFundRequest{} }
func (m *AllocateFundRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateFundRequest) ProtoMessage()    {}
func (*AllocateFundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{0}
}
func (m *AllocateFundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateFundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateFundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateFundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateFundRequest.Merge(m, src)
}
func (m *AllocateFundRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateFundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateFundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateFundRequest proto.InternalMessageInfo

func (m *AllocateFundRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AllocateFundRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AllocateFundRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type Host struct {
	Participants []*Party                      `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId       *StateRef                     `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Notary       *Party                        `protobuf:"bytes,3,opt,name=notary,proto3" json:"notary,omitempty"`
	ClientIds    []string                      `protobuf:"bytes,4,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
	ConnIds      []string                      `protobuf:"bytes,5,rep,name=conn_ids,json=connIds,proto3" json:"conn_ids,omitempty"`
	PortChanIds  []*Host_PortChannelIdentifier `protobuf:"bytes,6,rep,name=port_chan_ids,json=portChanIds,proto3" json:"port_chan_ids,omitempty"`
	Id           string                        `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{1}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Host) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *Host) GetNotary() *Party {
	if m != nil {
		return m.Notary
	}
	return nil
}

func (m *Host) GetClientIds() []string {
	if m != nil {
		return m.ClientIds
	}
	return nil
}

func (m *Host) GetConnIds() []string {
	if m != nil {
		return m.ConnIds
	}
	return nil
}

func (m *Host) GetPortChanIds() []*Host_PortChannelIdentifier {
	if m != nil {
		return m.PortChanIds
	}
	return nil
}

func (m *Host) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Host_PortChannelIdentifier struct {
	PortId    string `protobuf:"bytes,1,opt,name=portId,proto3" json:"portId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *Host_PortChannelIdentifier) Reset()         { *m = Host_PortChannelIdentifier{} }
func (m *Host_PortChannelIdentifier) String() string { return proto.CompactTextString(m) }
func (*Host_PortChannelIdentifier) ProtoMessage()    {}
func (*Host_PortChannelIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{1, 0}
}
func (m *Host_PortChannelIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host_PortChannelIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host_PortChannelIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host_PortChannelIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host_PortChannelIdentifier.Merge(m, src)
}
func (m *Host_PortChannelIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *Host_PortChannelIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Host_PortChannelIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_Host_PortChannelIdentifier proto.InternalMessageInfo

func (m *Host_PortChannelIdentifier) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *Host_PortChannelIdentifier) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type Bank struct {
	Participants []*Party          `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId       *StateRef         `protobuf:"bytes,2,opt,name=baseId,proto3" json:"baseId,omitempty"`
	Allocated    *Bank_BalanceMap  `protobuf:"bytes,3,opt,name=allocated,proto3" json:"allocated,omitempty"`
	Locked       *Bank_BalanceMap  `protobuf:"bytes,4,opt,name=locked,proto3" json:"locked,omitempty"`
	Minted       *Bank_BalanceMap  `protobuf:"bytes,5,opt,name=minted,proto3" json:"minted,omitempty"`
	Denoms       *Bank_IbcDenomMap `protobuf:"bytes,6,opt,name=denoms,proto3" json:"denoms,omitempty"`
	Id           string            `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Bank) Reset()         { *m = Bank{} }
func (m *Bank) String() string { return proto.CompactTextString(m) }
func (*Bank) ProtoMessage()    {}
func (*Bank) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{2}
}
func (m *Bank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank.Merge(m, src)
}
func (m *Bank) XXX_Size() int {
	return m.Size()
}
func (m *Bank) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank.DiscardUnknown(m)
}

var xxx_messageInfo_Bank proto.InternalMessageInfo

func (m *Bank) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Bank) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *Bank) GetAllocated() *Bank_BalanceMap {
	if m != nil {
		return m.Allocated
	}
	return nil
}

func (m *Bank) GetLocked() *Bank_BalanceMap {
	if m != nil {
		return m.Locked
	}
	return nil
}

func (m *Bank) GetMinted() *Bank_BalanceMap {
	if m != nil {
		return m.Minted
	}
	return nil
}

func (m *Bank) GetDenoms() *Bank_IbcDenomMap {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *Bank) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Bank_BalanceMapPerDenom struct {
	PubkeyToAmount map[string]string `protobuf:"bytes,1,rep,name=pubkeyToAmount,proto3" json:"pubkeyToAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_BalanceMapPerDenom) Reset()         { *m = Bank_BalanceMapPerDenom{} }
func (m *Bank_BalanceMapPerDenom) String() string { return proto.CompactTextString(m) }
func (*Bank_BalanceMapPerDenom) ProtoMessage()    {}
func (*Bank_BalanceMapPerDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{2, 0}
}
func (m *Bank_BalanceMapPerDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_BalanceMapPerDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_BalanceMapPerDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_BalanceMapPerDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_BalanceMapPerDenom.Merge(m, src)
}
func (m *Bank_BalanceMapPerDenom) XXX_Size() int {
	return m.Size()
}
func (m *Bank_BalanceMapPerDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_BalanceMapPerDenom.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_BalanceMapPerDenom proto.InternalMessageInfo

func (m *Bank_BalanceMapPerDenom) GetPubkeyToAmount() map[string]string {
	if m != nil {
		return m.PubkeyToAmount
	}
	return nil
}

type Bank_BalanceMap struct {
	DenomToMap map[string]*Bank_BalanceMapPerDenom `protobuf:"bytes,1,rep,name=denomToMap,proto3" json:"denomToMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_BalanceMap) Reset()         { *m = Bank_BalanceMap{} }
func (m *Bank_BalanceMap) String() string { return proto.CompactTextString(m) }
func (*Bank_BalanceMap) ProtoMessage()    {}
func (*Bank_BalanceMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{2, 1}
}
func (m *Bank_BalanceMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_BalanceMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_BalanceMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_BalanceMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_BalanceMap.Merge(m, src)
}
func (m *Bank_BalanceMap) XXX_Size() int {
	return m.Size()
}
func (m *Bank_BalanceMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_BalanceMap.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_BalanceMap proto.InternalMessageInfo

func (m *Bank_BalanceMap) GetDenomToMap() map[string]*Bank_BalanceMapPerDenom {
	if m != nil {
		return m.DenomToMap
	}
	return nil
}

type Bank_IbcDenomMap struct {
	IbcDenomToDenom map[string]string `protobuf:"bytes,1,rep,name=ibcDenomToDenom,proto3" json:"ibcDenomToDenom,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_IbcDenomMap) Reset()         { *m = Bank_IbcDenomMap{} }
func (m *Bank_IbcDenomMap) String() string { return proto.CompactTextString(m) }
func (*Bank_IbcDenomMap) ProtoMessage()    {}
func (*Bank_IbcDenomMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71041742d398325, []int{2, 2}
}
func (m *Bank_IbcDenomMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_IbcDenomMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_IbcDenomMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_IbcDenomMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_IbcDenomMap.Merge(m, src)
}
func (m *Bank_IbcDenomMap) XXX_Size() int {
	return m.Size()
}
func (m *Bank_IbcDenomMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_IbcDenomMap.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_IbcDenomMap proto.InternalMessageInfo

func (m *Bank_IbcDenomMap) GetIbcDenomToDenom() map[string]string {
	if m != nil {
		return m.IbcDenomToDenom
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocateFundRequest)(nil), "ibc.lightclients.corda.v1.AllocateFundRequest")
	proto.RegisterType((*Host)(nil), "ibc.lightclients.corda.v1.Host")
	proto.RegisterType((*Host_PortChannelIdentifier)(nil), "ibc.lightclients.corda.v1.Host.PortChannelIdentifier")
	proto.RegisterType((*Bank)(nil), "ibc.lightclients.corda.v1.Bank")
	proto.RegisterType((*Bank_BalanceMapPerDenom)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMapPerDenom")
	proto.RegisterMapType((map[string]string)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMapPerDenom.PubkeyToAmountEntry")
	proto.RegisterType((*Bank_BalanceMap)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMap")
	proto.RegisterMapType((map[string]*Bank_BalanceMapPerDenom)(nil), "ibc.lightclients.corda.v1.Bank.BalanceMap.DenomToMapEntry")
	proto.RegisterType((*Bank_IbcDenomMap)(nil), "ibc.lightclients.corda.v1.Bank.IbcDenomMap")
	proto.RegisterMapType((map[string]string)(nil), "ibc.lightclients.corda.v1.Bank.IbcDenomMap.IbcDenomToDenomEntry")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/host-and-bank.proto", fileDescriptor_c71041742d398325)
}

var fileDescriptor_c71041742d398325 = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0x8e, 0x6c, 0xc7, 0xa9, 0x5f, 0x77, 0xed, 0xc6, 0x76, 0x85, 0xab, 0x6d, 0xae, 0x91, 0x5d,
	0x82, 0x15, 0x96, 0x50, 0x0f, 0x03, 0x8a, 0x6e, 0x87, 0xf9, 0xa3, 0x5d, 0x7c, 0x08, 0xe0, 0xa9,
	0xc1, 0x80, 0xf6, 0x12, 0x50, 0x22, 0x63, 0x73, 0x96, 0x49, 0x55, 0xa2, 0xbc, 0xe8, 0x5f, 0xec,
	0xb8, 0x9f, 0xb2, 0x4b, 0xcf, 0xdb, 0x31, 0xc7, 0x01, 0xbb, 0x0c, 0xc9, 0x1f, 0x19, 0x48, 0xd1,
	0x1f, 0xc9, 0x6c, 0x27, 0x1e, 0x7a, 0x12, 0xdf, 0xaf, 0x87, 0xcf, 0xcb, 0x97, 0xe2, 0x03, 0x4d,
	0xe6, 0x07, 0x6e, 0xc8, 0x86, 0x23, 0x19, 0x84, 0x8c, 0x72, 0x99, 0xb8, 0x81, 0x88, 0x09, 0x76,
	0xa7, 0xcf, 0xdc, 0x91, 0x48, 0x64, 0x13, 0x73, 0xd2, 0xf4, 0x31, 0x1f, 0x3b, 0x51, 0x2c, 0xa4,
	0x40, 0x8f, 0x99, 0x1f, 0x38, 0xcb, 0xe9, 0x8e, 0x4e, 0x77, 0xa6, 0xcf, 0xec, 0xa7, 0xeb, 0x91,
	0xf4, 0xa2, 0x29, 0xb3, 0x88, 0x26, 0x39, 0x8e, 0xfd, 0xd9, 0x50, 0x88, 0x61, 0x48, 0x5d, 0x6d,
	0xf9, 0xe9, 0xa9, 0x4b, 0x27, 0x91, 0xcc, 0xf2, 0xe0, 0xfe, 0x1b, 0x78, 0xd0, 0x0e, 0x43, 0x11,
	0x60, 0x49, 0x5f, 0xa5, 0x9c, 0x78, 0xf4, 0x5d, 0x4a, 0x13, 0x89, 0x1e, 0xc2, 0xae, 0xf8, 0x85,
	0xd3, 0xb8, 0x66, 0x35, 0xac, 0x83, 0x8a, 0x97, 0x1b, 0xca, 0x4b, 0x28, 0x17, 0x93, 0x5a, 0x21,
	0xf7, 0x6a, 0x03, 0x3d, 0x82, 0x32, 0x9e, 0x88, 0x94, 0xcb, 0x5a, 0x51, 0xbb, 0x8d, 0xb5, 0xff,
	0x7b, 0x11, 0x4a, 0x87, 0x22, 0x91, 0xa8, 0x07, 0x77, 0x23, 0x1c, 0x4b, 0x16, 0xb0, 0x08, 0x73,
	0x99, 0xd4, 0xac, 0x46, 0xf1, 0xa0, 0xda, 0x6a, 0x38, 0x6b, 0xfb, 0x73, 0x06, 0x38, 0x96, 0x99,
	0x77, 0xa5, 0x0a, 0x7d, 0x07, 0x7b, 0x3e, 0x4e, 0xe8, 0x09, 0x23, 0x7a, 0xfb, 0x6a, 0xeb, 0xcb,
	0x0d, 0x00, 0xaf, 0x25, 0x96, 0xd4, 0xa3, 0xa7, 0x5e, 0x59, 0xd5, 0xf4, 0x09, 0x7a, 0x0e, 0x65,
	0x2e, 0x24, 0x8e, 0x33, 0x4d, 0xf2, 0x36, 0xbb, 0x9b, 0x7c, 0xf4, 0x05, 0x40, 0x9e, 0x71, 0xc2,
	0x48, 0x52, 0x2b, 0x35, 0x8a, 0x07, 0x15, 0xaf, 0x92, 0x7b, 0xfa, 0x24, 0x41, 0x8f, 0xe1, 0x4e,
	0x20, 0x38, 0xd7, 0xc1, 0x5d, 0x1d, 0xdc, 0x53, 0xb6, 0x0a, 0xbd, 0x81, 0x8f, 0x22, 0x11, 0xcb,
	0x93, 0x60, 0x84, 0xf3, 0x78, 0x59, 0x37, 0xfe, 0xcd, 0x86, 0xad, 0xd5, 0x79, 0x39, 0x03, 0x11,
	0xcb, 0xee, 0x08, 0x73, 0x4e, 0xc3, 0x3e, 0xa1, 0x5c, 0xb2, 0x53, 0x46, 0x63, 0xaf, 0x1a, 0x19,
	0xb7, 0x82, 0xbe, 0x07, 0x05, 0x46, 0x6a, 0x7b, 0xfa, 0xbc, 0x0b, 0x8c, 0xd8, 0x47, 0xf0, 0xe9,
	0xca, 0x2a, 0x35, 0x1c, 0x55, 0xd7, 0x27, 0x66, 0x92, 0xc6, 0x42, 0x9f, 0x43, 0x25, 0x98, 0x25,
	0x9b, 0x71, 0x2e, 0x1c, 0xfb, 0xbf, 0xdd, 0x81, 0x52, 0x07, 0xf3, 0xf1, 0x07, 0x1a, 0xdd, 0xb7,
	0x60, 0xc6, 0xf0, 0x7f, 0x26, 0x77, 0x08, 0x15, 0x6c, 0x6e, 0x28, 0x31, 0xc3, 0xfb, 0x6a, 0x43,
	0xbd, 0xa2, 0xed, 0x74, 0x70, 0x88, 0x79, 0x40, 0x8f, 0x70, 0xe4, 0x2d, 0x8a, 0x51, 0x07, 0xca,
	0xa1, 0x08, 0xc6, 0x94, 0xd4, 0x4a, 0x5b, 0xc3, 0x98, 0x4a, 0x85, 0x31, 0x61, 0x5c, 0x51, 0xd9,
	0xdd, 0x1e, 0x23, 0xaf, 0x44, 0x5d, 0x28, 0xeb, 0x3f, 0x47, 0x5d, 0x08, 0x85, 0xf1, 0xf4, 0x26,
	0x8c, 0xbe, 0x1f, 0xf4, 0x54, 0x81, 0x06, 0xc9, 0x4b, 0xff, 0x73, 0x03, 0xfe, 0xb0, 0x00, 0x2d,
	0xf6, 0x1a, 0xd0, 0x58, 0x57, 0x20, 0x0e, 0xf7, 0xa2, 0xd4, 0x1f, 0xd3, 0xec, 0x58, 0xb4, 0xf3,
	0x9f, 0x34, 0x1f, 0xe1, 0xab, 0xdb, 0xf3, 0x9e, 0x61, 0x39, 0x83, 0x2b, 0x40, 0x2f, 0xb9, 0x8c,
	0x33, 0xef, 0x1a, 0xba, 0xdd, 0x86, 0x07, 0x2b, 0xd2, 0xd0, 0xc7, 0x50, 0x1c, 0xd3, 0xcc, 0xdc,
	0x41, 0xb5, 0x54, 0x6f, 0xc9, 0x14, 0x87, 0x29, 0x9d, 0xbd, 0x25, 0xda, 0x78, 0x51, 0x78, 0x6e,
	0xd9, 0x7f, 0x5b, 0x00, 0x8b, 0xdd, 0xd1, 0x5b, 0x00, 0xdd, 0xf2, 0xb1, 0x38, 0xc2, 0x91, 0x61,
	0xff, 0xe2, 0xf6, 0xec, 0x9d, 0xde, 0xbc, 0x38, 0x67, 0xbc, 0x84, 0x66, 0xbf, 0x83, 0xfb, 0xd7,
	0xc2, 0x2b, 0x98, 0x1e, 0x2e, 0x33, 0xad, 0xb6, 0x5a, 0xdb, 0x9f, 0xdc, 0x72, 0x77, 0xef, 0x2d,
	0xa8, 0x2e, 0xcd, 0x13, 0xfd, 0x0c, 0xf7, 0x99, 0x31, 0x8f, 0x85, 0xfe, 0x98, 0x1e, 0xbf, 0xdf,
	0xe2, 0x56, 0xcc, 0xd7, 0x06, 0x22, 0xef, 0xf4, 0x3a, 0xb0, 0xdd, 0x81, 0x87, 0xab, 0x12, 0xb7,
	0x99, 0x4e, 0xeb, 0x7d, 0x01, 0x90, 0x7a, 0xa5, 0xda, 0x9c, 0x28, 0x16, 0xaf, 0x69, 0x3c, 0x65,
	0x01, 0x45, 0x5d, 0xf8, 0xa4, 0x1b, 0x53, 0x2c, 0xe9, 0x52, 0x0c, 0x3d, 0x72, 0x72, 0xe9, 0x71,
	0x66, 0xd2, 0xe3, 0xbc, 0x54, 0xd2, 0x63, 0xaf, 0xf1, 0xa3, 0x9f, 0xe0, 0xee, 0xb2, 0x18, 0x21,
	0x67, 0xc3, 0x11, 0xac, 0x50, 0xad, 0xb5, 0xb8, 0x3d, 0xa8, 0xfc, 0x98, 0xd2, 0x38, 0xd3, 0x6a,
	0xb4, 0x8e, 0xd4, 0x93, 0x1b, 0x9e, 0xe5, 0x39, 0xca, 0xc6, 0xd6, 0x9e, 0xdc, 0x30, 0xb5, 0x0e,
	0xfe, 0xf3, 0xa2, 0x6e, 0x9d, 0x5f, 0xd4, 0xad, 0x7f, 0x2e, 0xea, 0xd6, 0xaf, 0x97, 0xf5, 0x9d,
	0xf3, 0xcb, 0xfa, 0xce, 0x5f, 0x97, 0xf5, 0x9d, 0xb7, 0x3f, 0x0c, 0x99, 0x1c, 0xa5, 0xbe, 0x13,
	0x88, 0x89, 0x4b, 0xb0, 0xc4, 0xc1, 0x08, 0x33, 0x1e, 0x62, 0xdf, 0x48, 0xba, 0x92, 0xfc, 0xa1,
	0x70, 0xcf, 0xdc, 0xb9, 0xf6, 0x37, 0x67, 0xe2, 0x7f, 0x76, 0xd6, 0xcc, 0xf5, 0x5f, 0xcb, 0xbe,
	0x5f, 0xd6, 0x9c, 0xbe, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x36, 0x06, 0x9e, 0x70, 0x08,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HostAndBankServiceClient is the client API for HostAndBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostAndBankServiceClient interface {
	// transactions
	CreateHostAndBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllocateFund(ctx context.Context, in *AllocateFundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// queries
	QueryHost(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Host, error)
	QueryBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Bank, error)
}

type hostAndBankServiceClient struct {
	cc grpc1.ClientConn
}

func NewHostAndBankServiceClient(cc grpc1.ClientConn) HostAndBankServiceClient {
	return &hostAndBankServiceClient{cc}
}

func (c *hostAndBankServiceClient) CreateHostAndBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.HostAndBankService/CreateHostAndBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAndBankServiceClient) AllocateFund(ctx context.Context, in *AllocateFundRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.HostAndBankService/AllocateFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAndBankServiceClient) QueryHost(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.HostAndBankService/QueryHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostAndBankServiceClient) QueryBank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Bank, error) {
	out := new(Bank)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.HostAndBankService/QueryBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostAndBankServiceServer is the server API for HostAndBankService service.
type HostAndBankServiceServer interface {
	// transactions
	CreateHostAndBank(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	AllocateFund(context.Context, *AllocateFundRequest) (*emptypb.Empty, error)
	// queries
	QueryHost(context.Context, *emptypb.Empty) (*Host, error)
	QueryBank(context.Context, *emptypb.Empty) (*Bank, error)
}

// UnimplementedHostAndBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostAndBankServiceServer struct {
}

func (*UnimplementedHostAndBankServiceServer) CreateHostAndBank(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostAndBank not implemented")
}
func (*UnimplementedHostAndBankServiceServer) AllocateFund(ctx context.Context, req *AllocateFundRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateFund not implemented")
}
func (*UnimplementedHostAndBankServiceServer) QueryHost(ctx context.Context, req *emptypb.Empty) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHost not implemented")
}
func (*UnimplementedHostAndBankServiceServer) QueryBank(ctx context.Context, req *emptypb.Empty) (*Bank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBank not implemented")
}

func RegisterHostAndBankServiceServer(s grpc1.Server, srv HostAndBankServiceServer) {
	s.RegisterService(&_HostAndBankService_serviceDesc, srv)
}

func _HostAndBankService_CreateHostAndBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAndBankServiceServer).CreateHostAndBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.HostAndBankService/CreateHostAndBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAndBankServiceServer).CreateHostAndBank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAndBankService_AllocateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAndBankServiceServer).AllocateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.HostAndBankService/AllocateFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAndBankServiceServer).AllocateFund(ctx, req.(*AllocateFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAndBankService_QueryHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAndBankServiceServer).QueryHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.HostAndBankService/QueryHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAndBankServiceServer).QueryHost(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostAndBankService_QueryBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostAndBankServiceServer).QueryBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.HostAndBankService/QueryBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostAndBankServiceServer).QueryBank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostAndBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.HostAndBankService",
	HandlerType: (*HostAndBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHostAndBank",
			Handler:    _HostAndBankService_CreateHostAndBank_Handler,
		},
		{
			MethodName: "AllocateFund",
			Handler:    _HostAndBankService_AllocateFund_Handler,
		},
		{
			MethodName: "QueryHost",
			Handler:    _HostAndBankService_QueryHost_Handler,
		},
		{
			MethodName: "QueryBank",
			Handler:    _HostAndBankService_QueryBank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/host-and-bank.proto",
}

func (m *AllocateFundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateFundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateFundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PortChanIds) > 0 {
		for iNdEx := len(m.PortChanIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PortChanIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHostAndBank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ConnIds) > 0 {
		for iNdEx := len(m.ConnIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConnIds[iNdEx])
			copy(dAtA[i:], m.ConnIds[iNdEx])
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.ConnIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ClientIds) > 0 {
		for iNdEx := len(m.ClientIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIds[iNdEx])
			copy(dAtA[i:], m.ClientIds[iNdEx])
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.ClientIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Notary != nil {
		{
			size, err := m.Notary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHostAndBank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Host_PortChannelIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host_PortChannelIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host_PortChannelIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHostAndBank(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Denoms != nil {
		{
			size, err := m.Denoms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Minted != nil {
		{
			size, err := m.Minted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Locked != nil {
		{
			size, err := m.Locked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Allocated != nil {
		{
			size, err := m.Allocated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHostAndBank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHostAndBank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_BalanceMapPerDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_BalanceMapPerDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_BalanceMapPerDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubkeyToAmount) > 0 {
		for k := range m.PubkeyToAmount {
			v := m.PubkeyToAmount[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHostAndBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_BalanceMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_BalanceMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_BalanceMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomToMap) > 0 {
		for k := range m.DenomToMap {
			v := m.DenomToMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHostAndBank(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHostAndBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_IbcDenomMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_IbcDenomMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_IbcDenomMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenomToDenom) > 0 {
		for k := range m.IbcDenomToDenom {
			v := m.IbcDenomToDenom[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHostAndBank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHostAndBank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostAndBank(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostAndBank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocateFundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovHostAndBank(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	if m.Notary != nil {
		l = m.Notary.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovHostAndBank(uint64(l))
		}
	}
	if len(m.ConnIds) > 0 {
		for _, s := range m.ConnIds {
			l = len(s)
			n += 1 + l + sovHostAndBank(uint64(l))
		}
	}
	if len(m.PortChanIds) > 0 {
		for _, e := range m.PortChanIds {
			l = e.Size()
			n += 1 + l + sovHostAndBank(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	return n
}

func (m *Host_PortChannelIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	return n
}

func (m *Bank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovHostAndBank(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	if m.Allocated != nil {
		l = m.Allocated.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	if m.Locked != nil {
		l = m.Locked.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	if m.Minted != nil {
		l = m.Minted.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	if m.Denoms != nil {
		l = m.Denoms.Size()
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHostAndBank(uint64(l))
	}
	return n
}

func (m *Bank_BalanceMapPerDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PubkeyToAmount) > 0 {
		for k, v := range m.PubkeyToAmount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHostAndBank(uint64(len(k))) + 1 + len(v) + sovHostAndBank(uint64(len(v)))
			n += mapEntrySize + 1 + sovHostAndBank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bank_BalanceMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomToMap) > 0 {
		for k, v := range m.DenomToMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHostAndBank(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovHostAndBank(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovHostAndBank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bank_IbcDenomMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IbcDenomToDenom) > 0 {
		for k, v := range m.IbcDenomToDenom {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovHostAndBank(uint64(len(k))) + 1 + len(v) + sovHostAndBank(uint64(len(v)))
			n += mapEntrySize + 1 + sovHostAndBank(uint64(mapEntrySize))
		}
	}
	return n
}

func sovHostAndBank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostAndBank(x uint64) (n int) {
	return sovHostAndBank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocateFundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateFundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateFundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notary == nil {
				m.Notary = &Party{}
			}
			if err := m.Notary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnIds = append(m.ConnIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortChanIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChanIds = append(m.PortChanIds, &Host_PortChannelIdentifier{})
			if err := m.PortChanIds[len(m.PortChanIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host_PortChannelIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortChannelIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortChannelIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocated == nil {
				m.Allocated = &Bank_BalanceMap{}
			}
			if err := m.Allocated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locked == nil {
				m.Locked = &Bank_BalanceMap{}
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minted == nil {
				m.Minted = &Bank_BalanceMap{}
			}
			if err := m.Minted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denoms == nil {
				m.Denoms = &Bank_IbcDenomMap{}
			}
			if err := m.Denoms.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_BalanceMapPerDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMapPerDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMapPerDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyToAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyToAmount == nil {
				m.PubkeyToAmount = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHostAndBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostAndBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHostAndBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostAndBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHostAndBank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHostAndBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PubkeyToAmount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_BalanceMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomToMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomToMap == nil {
				m.DenomToMap = make(map[string]*Bank_BalanceMapPerDenom)
			}
			var mapkey string
			var mapvalue *Bank_BalanceMapPerDenom
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHostAndBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostAndBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHostAndBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostAndBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHostAndBank
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bank_BalanceMapPerDenom{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHostAndBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomToMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_IbcDenomMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcDenomMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcDenomMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenomToDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostAndBank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcDenomToDenom == nil {
				m.IbcDenomToDenom = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHostAndBank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostAndBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHostAndBank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostAndBank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthHostAndBank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHostAndBank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHostAndBank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IbcDenomToDenom[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostAndBank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHostAndBank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostAndBank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostAndBank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostAndBank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostAndBank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostAndBank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostAndBank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostAndBank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostAndBank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostAndBank = fmt.Errorf("proto: unexpected end of group")
)
