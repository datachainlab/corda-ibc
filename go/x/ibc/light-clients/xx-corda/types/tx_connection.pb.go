// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/corda/v1/tx_connection.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v4/modules/core/03-connection/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectionOpenInitRequest struct {
	Request *types.MsgConnectionOpenInit `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                    `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ConnectionOpenInitRequest) Reset()         { *m = ConnectionOpenInitRequest{} }
func (m *ConnectionOpenInitRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenInitRequest) ProtoMessage()    {}
func (*ConnectionOpenInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{0}
}
func (m *ConnectionOpenInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenInitRequest.Merge(m, src)
}
func (m *ConnectionOpenInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenInitRequest proto.InternalMessageInfo

func (m *ConnectionOpenInitRequest) GetRequest() *types.MsgConnectionOpenInit {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ConnectionOpenInitRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ConnectionOpenInitResponse struct {
	Response     *types.MsgConnectionOpenInitResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof        []byte                               `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	ConnectionId string                               `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *ConnectionOpenInitResponse) Reset()         { *m = ConnectionOpenInitResponse{} }
func (m *ConnectionOpenInitResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenInitResponse) ProtoMessage()    {}
func (*ConnectionOpenInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{1}
}
func (m *ConnectionOpenInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenInitResponse.Merge(m, src)
}
func (m *ConnectionOpenInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenInitResponse proto.InternalMessageInfo

func (m *ConnectionOpenInitResponse) GetResponse() *types.MsgConnectionOpenInitResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ConnectionOpenInitResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *ConnectionOpenInitResponse) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type ConnectionOpenTryRequest struct {
	Request *types.MsgConnectionOpenTry `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                   `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ConnectionOpenTryRequest) Reset()         { *m = ConnectionOpenTryRequest{} }
func (m *ConnectionOpenTryRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenTryRequest) ProtoMessage()    {}
func (*ConnectionOpenTryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{2}
}
func (m *ConnectionOpenTryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenTryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenTryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenTryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenTryRequest.Merge(m, src)
}
func (m *ConnectionOpenTryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenTryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenTryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenTryRequest proto.InternalMessageInfo

func (m *ConnectionOpenTryRequest) GetRequest() *types.MsgConnectionOpenTry {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ConnectionOpenTryRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ConnectionOpenTryResponse struct {
	Response     *types.MsgConnectionOpenTryResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof        []byte                              `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	ConnectionId string                              `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *ConnectionOpenTryResponse) Reset()         { *m = ConnectionOpenTryResponse{} }
func (m *ConnectionOpenTryResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenTryResponse) ProtoMessage()    {}
func (*ConnectionOpenTryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{3}
}
func (m *ConnectionOpenTryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenTryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenTryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenTryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenTryResponse.Merge(m, src)
}
func (m *ConnectionOpenTryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenTryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenTryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenTryResponse proto.InternalMessageInfo

func (m *ConnectionOpenTryResponse) GetResponse() *types.MsgConnectionOpenTryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ConnectionOpenTryResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *ConnectionOpenTryResponse) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type ConnectionOpenAckRequest struct {
	Request *types.MsgConnectionOpenAck `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                   `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ConnectionOpenAckRequest) Reset()         { *m = ConnectionOpenAckRequest{} }
func (m *ConnectionOpenAckRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenAckRequest) ProtoMessage()    {}
func (*ConnectionOpenAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{4}
}
func (m *ConnectionOpenAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenAckRequest.Merge(m, src)
}
func (m *ConnectionOpenAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenAckRequest proto.InternalMessageInfo

func (m *ConnectionOpenAckRequest) GetRequest() *types.MsgConnectionOpenAck {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ConnectionOpenAckRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ConnectionOpenAckResponse struct {
	Response *types.MsgConnectionOpenAckResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                              `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ConnectionOpenAckResponse) Reset()         { *m = ConnectionOpenAckResponse{} }
func (m *ConnectionOpenAckResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenAckResponse) ProtoMessage()    {}
func (*ConnectionOpenAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{5}
}
func (m *ConnectionOpenAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenAckResponse.Merge(m, src)
}
func (m *ConnectionOpenAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenAckResponse proto.InternalMessageInfo

func (m *ConnectionOpenAckResponse) GetResponse() *types.MsgConnectionOpenAckResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ConnectionOpenAckResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type ConnectionOpenConfirmRequest struct {
	Request *types.MsgConnectionOpenConfirm `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BaseId  *StateRef                       `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *ConnectionOpenConfirmRequest) Reset()         { *m = ConnectionOpenConfirmRequest{} }
func (m *ConnectionOpenConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenConfirmRequest) ProtoMessage()    {}
func (*ConnectionOpenConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{6}
}
func (m *ConnectionOpenConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenConfirmRequest.Merge(m, src)
}
func (m *ConnectionOpenConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenConfirmRequest proto.InternalMessageInfo

func (m *ConnectionOpenConfirmRequest) GetRequest() *types.MsgConnectionOpenConfirm {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ConnectionOpenConfirmRequest) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type ConnectionOpenConfirmResponse struct {
	Response *types.MsgConnectionOpenConfirmResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Proof    []byte                                  `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ConnectionOpenConfirmResponse) Reset()         { *m = ConnectionOpenConfirmResponse{} }
func (m *ConnectionOpenConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionOpenConfirmResponse) ProtoMessage()    {}
func (*ConnectionOpenConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41bcf211e0719442, []int{7}
}
func (m *ConnectionOpenConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionOpenConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionOpenConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionOpenConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionOpenConfirmResponse.Merge(m, src)
}
func (m *ConnectionOpenConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionOpenConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionOpenConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionOpenConfirmResponse proto.InternalMessageInfo

func (m *ConnectionOpenConfirmResponse) GetResponse() *types.MsgConnectionOpenConfirmResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ConnectionOpenConfirmResponse) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectionOpenInitRequest)(nil), "ibc.lightclients.corda.v1.ConnectionOpenInitRequest")
	proto.RegisterType((*ConnectionOpenInitResponse)(nil), "ibc.lightclients.corda.v1.ConnectionOpenInitResponse")
	proto.RegisterType((*ConnectionOpenTryRequest)(nil), "ibc.lightclients.corda.v1.ConnectionOpenTryRequest")
	proto.RegisterType((*ConnectionOpenTryResponse)(nil), "ibc.lightclients.corda.v1.ConnectionOpenTryResponse")
	proto.RegisterType((*ConnectionOpenAckRequest)(nil), "ibc.lightclients.corda.v1.ConnectionOpenAckRequest")
	proto.RegisterType((*ConnectionOpenAckResponse)(nil), "ibc.lightclients.corda.v1.ConnectionOpenAckResponse")
	proto.RegisterType((*ConnectionOpenConfirmRequest)(nil), "ibc.lightclients.corda.v1.ConnectionOpenConfirmRequest")
	proto.RegisterType((*ConnectionOpenConfirmResponse)(nil), "ibc.lightclients.corda.v1.ConnectionOpenConfirmResponse")
}

func init() {
	proto.RegisterFile("ibc/lightclients/corda/v1/tx_connection.proto", fileDescriptor_41bcf211e0719442)
}

var fileDescriptor_41bcf211e0719442 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0xeb, 0xdf, 0x0f, 0x36, 0x30, 0xdb, 0x01, 0x0b, 0xa4, 0x2e, 0x82, 0x30, 0x75, 0x97,
	0x49, 0x10, 0x9b, 0x6e, 0x9d, 0xd8, 0x81, 0xcb, 0x98, 0x04, 0x2a, 0xd2, 0x34, 0x08, 0x3b, 0x71,
	0x99, 0x1a, 0xc7, 0x4d, 0xad, 0x75, 0x71, 0x70, 0xdc, 0xaa, 0xbd, 0x20, 0x21, 0x6e, 0x70, 0xe1,
	0x25, 0x4c, 0x9c, 0x10, 0xaf, 0x84, 0xe3, 0x8e, 0x1c, 0x51, 0xfb, 0x46, 0x50, 0xfe, 0x35, 0xed,
	0xd2, 0x40, 0x22, 0x85, 0x9b, 0x13, 0xf9, 0xfb, 0x7d, 0xbe, 0xcf, 0xc7, 0xb2, 0x1f, 0x68, 0x70,
	0x8b, 0x92, 0x3e, 0x77, 0x7a, 0x8a, 0xf6, 0x39, 0x73, 0x95, 0x4f, 0xa8, 0x90, 0x76, 0x87, 0x0c,
	0x9b, 0x44, 0x8d, 0x4e, 0xa9, 0x70, 0x5d, 0x46, 0x15, 0x17, 0x2e, 0xf6, 0xa4, 0x50, 0x02, 0x6d,
	0x70, 0x8b, 0xe2, 0xf9, 0xed, 0x38, 0xdc, 0x8e, 0x87, 0x4d, 0xed, 0x41, 0xe0, 0x44, 0x85, 0x64,
	0x24, 0x55, 0x45, 0x36, 0x91, 0x56, 0x7b, 0x98, 0x5f, 0x2a, 0x5c, 0x18, 0x6a, 0xec, 0x31, 0x3f,
	0xda, 0xdc, 0xf8, 0x0a, 0xe0, 0xc6, 0xe1, 0xcc, 0xe7, 0xd8, 0x63, 0x6e, 0xdb, 0xe5, 0xca, 0x64,
	0xef, 0x06, 0xcc, 0x57, 0xe8, 0x05, 0x5c, 0x95, 0xd1, 0xb2, 0x0e, 0x36, 0xc1, 0xf6, 0xad, 0x1d,
	0x03, 0x07, 0xc1, 0x82, 0xea, 0x78, 0x2e, 0xf3, 0xb0, 0x89, 0x8f, 0x7c, 0x67, 0x89, 0x4d, 0xa2,
	0x46, 0x4f, 0xe1, 0xaa, 0xd5, 0xf1, 0xd9, 0x29, 0xb7, 0xeb, 0xff, 0x85, 0x46, 0x5b, 0x38, 0xb7,
	0x43, 0xfc, 0x46, 0x75, 0x14, 0x33, 0x59, 0xd7, 0x5c, 0x09, 0x34, 0x6d, 0xbb, 0xf1, 0x1d, 0x40,
	0x6d, 0x59, 0x48, 0xdf, 0x13, 0xae, 0xcf, 0xd0, 0x6b, 0x78, 0x43, 0xc6, 0xeb, 0x38, 0xe6, 0x5e,
	0xb9, 0x98, 0xb1, 0xd8, 0x9c, 0xd9, 0xa0, 0x3b, 0xf0, 0xba, 0x27, 0x85, 0xe8, 0x86, 0x69, 0xd7,
	0xcc, 0xe8, 0x03, 0x6d, 0xc1, 0xf5, 0xd4, 0x2e, 0xe8, 0xe5, 0xff, 0x4d, 0xb0, 0x7d, 0xd3, 0x5c,
	0x4b, 0x7f, 0xb6, 0xed, 0xc6, 0x05, 0x80, 0xf5, 0xc5, 0x1a, 0x27, 0x72, 0x9c, 0x00, 0x7d, 0x7e,
	0x15, 0xe8, 0xa3, 0xc2, 0x49, 0x03, 0x97, 0x8a, 0x78, 0x7e, 0xcb, 0x1c, 0x7a, 0x18, 0x31, 0xee,
	0xfd, 0x55, 0x06, 0x67, 0xab, 0x54, 0xc8, 0x7f, 0x4c, 0xf3, 0x80, 0x9e, 0x55, 0x40, 0x33, 0x70,
	0xa9, 0x88, 0xe6, 0xc7, 0x0c, 0xcd, 0x30, 0x62, 0x05, 0x34, 0xe7, 0x7c, 0xfe, 0x46, 0x33, 0x38,
	0xd3, 0x7b, 0x8b, 0xea, 0x43, 0xe1, 0x76, 0xb9, 0x3c, 0x4f, 0x60, 0xbd, 0xbc, 0x0a, 0xeb, 0x71,
	0xe1, 0x1c, 0x89, 0x53, 0x45, 0xc0, 0x3e, 0x03, 0x78, 0x3f, 0x27, 0x6a, 0xdc, 0xe2, 0x49, 0x06,
	0xda, 0x7e, 0xe9, 0xb0, 0x05, 0xc1, 0xed, 0x5c, 0x5c, 0x83, 0xeb, 0xa9, 0xc3, 0x91, 0xef, 0xa0,
	0x0f, 0x00, 0xa2, 0xec, 0x2b, 0x81, 0x5a, 0x7f, 0xe8, 0x31, 0xf7, 0x09, 0xd5, 0xf6, 0x4a, 0xaa,
	0xe2, 0xac, 0xef, 0xe1, 0xed, 0xcc, 0xcd, 0x42, 0xbb, 0x85, 0xbd, 0xd2, 0x27, 0x47, 0x6b, 0x95,
	0x13, 0xe5, 0xd5, 0x3f, 0xa0, 0x67, 0x25, 0xea, 0xa7, 0x97, 0xb4, 0x44, 0xfd, 0xf9, 0x6b, 0xf3,
	0x09, 0xc0, 0xbb, 0x4b, 0xcf, 0x15, 0x3d, 0x29, 0xec, 0xb7, 0x78, 0x01, 0xb4, 0xfd, 0xf2, 0xc2,
	0x28, 0xcc, 0x33, 0xfe, 0x63, 0xa2, 0x83, 0xcb, 0x89, 0x0e, 0x7e, 0x4d, 0x74, 0xf0, 0x65, 0xaa,
	0xd7, 0x2e, 0xa7, 0x7a, 0xed, 0xe7, 0x54, 0xaf, 0xbd, 0x3d, 0x76, 0xb8, 0xea, 0x0d, 0x2c, 0x4c,
	0xc5, 0x39, 0xe9, 0x8d, 0x3d, 0x26, 0xfb, 0xcc, 0x76, 0x98, 0x34, 0xfa, 0x1d, 0xcb, 0x27, 0xe3,
	0x01, 0x37, 0xa2, 0x89, 0x1b, 0x4c, 0x64, 0x47, 0x90, 0x11, 0x99, 0x8d, 0x66, 0x23, 0x99, 0xcd,
	0xa3, 0x51, 0xb4, 0x87, 0x84, 0x53, 0xd9, 0x5a, 0x09, 0xc7, 0xf2, 0xee, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbb, 0x93, 0x38, 0xd6, 0x30, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectionMsgClient is the client API for ConnectionMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectionMsgClient interface {
	ConnectionOpenInit(ctx context.Context, in *ConnectionOpenInitRequest, opts ...grpc.CallOption) (*ConnectionOpenInitResponse, error)
	ConnectionOpenTry(ctx context.Context, in *ConnectionOpenTryRequest, opts ...grpc.CallOption) (*ConnectionOpenTryResponse, error)
	ConnectionOpenAck(ctx context.Context, in *ConnectionOpenAckRequest, opts ...grpc.CallOption) (*ConnectionOpenAckResponse, error)
	ConnectionOpenConfirm(ctx context.Context, in *ConnectionOpenConfirmRequest, opts ...grpc.CallOption) (*ConnectionOpenConfirmResponse, error)
}

type connectionMsgClient struct {
	cc grpc1.ClientConn
}

func NewConnectionMsgClient(cc grpc1.ClientConn) ConnectionMsgClient {
	return &connectionMsgClient{cc}
}

func (c *connectionMsgClient) ConnectionOpenInit(ctx context.Context, in *ConnectionOpenInitRequest, opts ...grpc.CallOption) (*ConnectionOpenInitResponse, error) {
	out := new(ConnectionOpenInitResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionMsgClient) ConnectionOpenTry(ctx context.Context, in *ConnectionOpenTryRequest, opts ...grpc.CallOption) (*ConnectionOpenTryResponse, error) {
	out := new(ConnectionOpenTryResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenTry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionMsgClient) ConnectionOpenAck(ctx context.Context, in *ConnectionOpenAckRequest, opts ...grpc.CallOption) (*ConnectionOpenAckResponse, error) {
	out := new(ConnectionOpenAckResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionMsgClient) ConnectionOpenConfirm(ctx context.Context, in *ConnectionOpenConfirmRequest, opts ...grpc.CallOption) (*ConnectionOpenConfirmResponse, error) {
	out := new(ConnectionOpenConfirmResponse)
	err := c.cc.Invoke(ctx, "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionMsgServer is the server API for ConnectionMsg service.
type ConnectionMsgServer interface {
	ConnectionOpenInit(context.Context, *ConnectionOpenInitRequest) (*ConnectionOpenInitResponse, error)
	ConnectionOpenTry(context.Context, *ConnectionOpenTryRequest) (*ConnectionOpenTryResponse, error)
	ConnectionOpenAck(context.Context, *ConnectionOpenAckRequest) (*ConnectionOpenAckResponse, error)
	ConnectionOpenConfirm(context.Context, *ConnectionOpenConfirmRequest) (*ConnectionOpenConfirmResponse, error)
}

// UnimplementedConnectionMsgServer can be embedded to have forward compatible implementations.
type UnimplementedConnectionMsgServer struct {
}

func (*UnimplementedConnectionMsgServer) ConnectionOpenInit(ctx context.Context, req *ConnectionOpenInitRequest) (*ConnectionOpenInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionOpenInit not implemented")
}
func (*UnimplementedConnectionMsgServer) ConnectionOpenTry(ctx context.Context, req *ConnectionOpenTryRequest) (*ConnectionOpenTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionOpenTry not implemented")
}
func (*UnimplementedConnectionMsgServer) ConnectionOpenAck(ctx context.Context, req *ConnectionOpenAckRequest) (*ConnectionOpenAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionOpenAck not implemented")
}
func (*UnimplementedConnectionMsgServer) ConnectionOpenConfirm(ctx context.Context, req *ConnectionOpenConfirmRequest) (*ConnectionOpenConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionOpenConfirm not implemented")
}

func RegisterConnectionMsgServer(s grpc1.Server, srv ConnectionMsgServer) {
	s.RegisterService(&_ConnectionMsg_serviceDesc, srv)
}

func _ConnectionMsg_ConnectionOpenInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionOpenInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionMsgServer).ConnectionOpenInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionMsgServer).ConnectionOpenInit(ctx, req.(*ConnectionOpenInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionMsg_ConnectionOpenTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionOpenTryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionMsgServer).ConnectionOpenTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenTry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionMsgServer).ConnectionOpenTry(ctx, req.(*ConnectionOpenTryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionMsg_ConnectionOpenAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionOpenAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionMsgServer).ConnectionOpenAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionMsgServer).ConnectionOpenAck(ctx, req.(*ConnectionOpenAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionMsg_ConnectionOpenConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionOpenConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionMsgServer).ConnectionOpenConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.lightclients.corda.v1.ConnectionMsg/ConnectionOpenConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionMsgServer).ConnectionOpenConfirm(ctx, req.(*ConnectionOpenConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectionMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.lightclients.corda.v1.ConnectionMsg",
	HandlerType: (*ConnectionMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectionOpenInit",
			Handler:    _ConnectionMsg_ConnectionOpenInit_Handler,
		},
		{
			MethodName: "ConnectionOpenTry",
			Handler:    _ConnectionMsg_ConnectionOpenTry_Handler,
		},
		{
			MethodName: "ConnectionOpenAck",
			Handler:    _ConnectionMsg_ConnectionOpenAck_Handler,
		},
		{
			MethodName: "ConnectionOpenConfirm",
			Handler:    _ConnectionMsg_ConnectionOpenConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/lightclients/corda/v1/tx_connection.proto",
}

func (m *ConnectionOpenInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTxConnection(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxConnection(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenTryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenTryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenTryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenTryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenTryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenTryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTxConnection(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxConnection(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxConnection(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionOpenConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionOpenConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionOpenConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTxConnection(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxConnection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxConnection(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxConnection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConnectionOpenInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxConnection(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenTryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenTryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxConnection(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func (m *ConnectionOpenConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovTxConnection(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTxConnection(uint64(l))
	}
	return n
}

func sovTxConnection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxConnection(x uint64) (n int) {
	return sovTxConnection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConnectionOpenInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgConnectionOpenInit{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgConnectionOpenInitResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenTryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenTryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenTryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgConnectionOpenTry{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenTryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenTryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenTryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgConnectionOpenTryResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgConnectionOpenAck{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgConnectionOpenAckResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &types.MsgConnectionOpenConfirm{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionOpenConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionOpenConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionOpenConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &types.MsgConnectionOpenConfirmResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxConnection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxConnection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxConnection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxConnection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxConnection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxConnection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxConnection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxConnection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxConnection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxConnection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxConnection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxConnection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxConnection = fmt.Errorf("proto: unexpected end of group")
)
