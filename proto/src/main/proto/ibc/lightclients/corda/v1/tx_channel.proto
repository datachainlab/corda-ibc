syntax = "proto3";
package ibc.lightclients.corda.v1;

option go_package = "github.com/hyperledger-labs/yui-corda-ibc/go/x/ibc/light-clients/xx-corda/types";

import "ibc/core/channel/v1/tx.proto";
import "ibc/lightclients/corda/v1/corda-types.proto";

service ChannelMsg {
  rpc ChannelOpenInit(MsgChannelOpenInit) returns (MsgChannelOpenInitResponse);
  rpc ChannelOpenTry(MsgChannelOpenTry) returns (MsgChannelOpenTryResponse);
  rpc ChannelOpenAck(MsgChannelOpenAck) returns (MsgChannelOpenAckResponse);
  rpc ChannelOpenConfirm(MsgChannelOpenConfirm) returns (MsgChannelOpenConfirmResponse);
  rpc ChannelCloseInit(MsgChannelCloseInit) returns (MsgChannelCloseInitResponse);
  rpc ChannelCloseConfirm(MsgChannelCloseConfirm) returns (MsgChannelCloseConfirmResponse);
  rpc RecvPacket(MsgRecvPacket) returns (MsgRecvPacketResponse);
  rpc Timeout(MsgTimeout) returns (MsgTimeoutResponse);
  rpc TimeoutOnClose(MsgTimeoutOnClose) returns (MsgTimeoutOnCloseResponse);
  rpc Acknowledgement(MsgAcknowledgement) returns (MsgAcknowledgementResponse);
}

message MsgChannelOpenInit {
  ibc.core.channel.v1.MsgChannelOpenInit request = 1;
  StateRef base_id = 2;
}

message MsgChannelOpenInitResponse {
  ibc.core.channel.v1.MsgChannelOpenInitResponse response = 1;
  bytes proof = 2;
  string channel_id = 3;
}

message MsgChannelOpenTry {
  ibc.core.channel.v1.MsgChannelOpenTry request = 1;
  StateRef base_id = 2;
}

message MsgChannelOpenTryResponse {
  ibc.core.channel.v1.MsgChannelOpenTryResponse response = 1;
  bytes proof = 2;
  string channel_id = 3;
}

message MsgChannelOpenAck {
  ibc.core.channel.v1.MsgChannelOpenAck request = 1;
  StateRef base_id = 2;
}

message MsgChannelOpenAckResponse {
  ibc.core.channel.v1.MsgChannelOpenAckResponse response = 1;
  bytes proof = 2;
}

message MsgChannelOpenConfirm {
  ibc.core.channel.v1.MsgChannelOpenConfirm request = 1;
  StateRef base_id = 2;
}

message MsgChannelOpenConfirmResponse {
  ibc.core.channel.v1.MsgChannelOpenConfirmResponse response = 1;
  bytes proof = 2;
}

message MsgChannelCloseInit {
  ibc.core.channel.v1.MsgChannelCloseInit request = 1;
  StateRef base_id = 2;
}

message MsgChannelCloseInitResponse {
  ibc.core.channel.v1.MsgChannelCloseInitResponse response = 1;
  bytes proof = 2;
}

message MsgChannelCloseConfirm {
  ibc.core.channel.v1.MsgChannelCloseConfirm request = 1;
  StateRef base_id = 2;
}

message MsgChannelCloseConfirmResponse {
  ibc.core.channel.v1.MsgChannelCloseConfirmResponse response = 1;
  bytes proof = 2;
}

message MsgRecvPacket {
  ibc.core.channel.v1.MsgRecvPacket request = 1;
  StateRef base_id = 2;
}

message MsgRecvPacketResponse {
  ibc.core.channel.v1.MsgRecvPacketResponse response = 1;
  bytes proof = 2;
}

message MsgTimeout {
  ibc.core.channel.v1.MsgTimeout request = 1;
  StateRef base_id = 2;
}

message MsgTimeoutResponse {
  ibc.core.channel.v1.MsgTimeoutResponse response = 1;
  bytes proof = 2;
}

message MsgTimeoutOnClose {
  ibc.core.channel.v1.MsgTimeoutOnClose request = 1;
  StateRef base_id = 2;
}

message MsgTimeoutOnCloseResponse {
  ibc.core.channel.v1.MsgTimeoutOnCloseResponse response = 1;
  bytes proof = 2;
}

message MsgAcknowledgement {
  ibc.core.channel.v1.MsgAcknowledgement request = 1;
  StateRef base_id = 2;
}

message MsgAcknowledgementResponse {
  ibc.core.channel.v1.MsgAcknowledgementResponse response = 1;
  bytes proof = 2;
}
