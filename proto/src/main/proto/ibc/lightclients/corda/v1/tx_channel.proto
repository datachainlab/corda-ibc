syntax = "proto3";
package ibc.lightclients.corda.v1;

option go_package = "github.com/hyperledger-labs/yui-corda-ibc/go/x/ibc/light-clients/xx-corda/types";

import "ibc/core/channel/v1/tx.proto";
import "ibc/lightclients/corda/v1/corda-types.proto";

service ChannelMsg {
  rpc ChannelOpenInit(ChannelOpenInitRequest) returns (ChannelOpenInitResponse);
  rpc ChannelOpenTry(ChannelOpenTryRequest) returns (ChannelOpenTryResponse);
  rpc ChannelOpenAck(ChannelOpenAckRequest) returns (ChannelOpenAckResponse);
  rpc ChannelOpenConfirm(ChannelOpenConfirmRequest) returns (ChannelOpenConfirmResponse);
  rpc ChannelCloseInit(ChannelCloseInitRequest) returns (ChannelCloseInitResponse);
  rpc ChannelCloseConfirm(ChannelCloseConfirmRequest) returns (ChannelCloseConfirmResponse);
  rpc RecvPacket(RecvPacketRequest) returns (RecvPacketResponse);
  rpc Timeout(TimeoutRequest) returns (TimeoutResponse);
  rpc TimeoutOnClose(TimeoutOnCloseRequest) returns (TimeoutOnCloseResponse);
  rpc Acknowledgement(AcknowledgementRequest) returns (AcknowledgementResponse);
}

message ChannelOpenInitRequest {
  ibc.core.channel.v1.MsgChannelOpenInit request = 1;
  StateRef base_id = 2;
}

message ChannelOpenInitResponse {
  ibc.core.channel.v1.MsgChannelOpenInitResponse response = 1;
  bytes proof = 2;
  string channel_id = 3;
}

message ChannelOpenTryRequest {
  ibc.core.channel.v1.MsgChannelOpenTry request = 1;
  StateRef base_id = 2;
}

message ChannelOpenTryResponse {
  ibc.core.channel.v1.MsgChannelOpenTryResponse response = 1;
  bytes proof = 2;
  string channel_id = 3;
}

message ChannelOpenAckRequest {
  ibc.core.channel.v1.MsgChannelOpenAck request = 1;
  StateRef base_id = 2;
}

message ChannelOpenAckResponse {
  ibc.core.channel.v1.MsgChannelOpenAckResponse response = 1;
  bytes proof = 2;
}

message ChannelOpenConfirmRequest {
  ibc.core.channel.v1.MsgChannelOpenConfirm request = 1;
  StateRef base_id = 2;
}

message ChannelOpenConfirmResponse {
  ibc.core.channel.v1.MsgChannelOpenConfirmResponse response = 1;
  bytes proof = 2;
}

message ChannelCloseInitRequest {
  ibc.core.channel.v1.MsgChannelCloseInit request = 1;
  StateRef base_id = 2;
}

message ChannelCloseInitResponse {
  ibc.core.channel.v1.MsgChannelCloseInitResponse response = 1;
  bytes proof = 2;
}

message ChannelCloseConfirmRequest {
  ibc.core.channel.v1.MsgChannelCloseConfirm request = 1;
  StateRef base_id = 2;
}

message ChannelCloseConfirmResponse {
  ibc.core.channel.v1.MsgChannelCloseConfirmResponse response = 1;
  bytes proof = 2;
}

message RecvPacketRequest {
  ibc.core.channel.v1.MsgRecvPacket request = 1;
  StateRef base_id = 2;
}

message RecvPacketResponse {
  ibc.core.channel.v1.MsgRecvPacketResponse response = 1;
  bytes proof = 2;
}

message TimeoutRequest {
  ibc.core.channel.v1.MsgTimeout request = 1;
  StateRef base_id = 2;
}

message TimeoutResponse {
  ibc.core.channel.v1.MsgTimeoutResponse response = 1;
  bytes proof = 2;
}

message TimeoutOnCloseRequest {
  ibc.core.channel.v1.MsgTimeoutOnClose request = 1;
  StateRef base_id = 2;
}

message TimeoutOnCloseResponse {
  ibc.core.channel.v1.MsgTimeoutOnCloseResponse response = 1;
  bytes proof = 2;
}

message AcknowledgementRequest {
  ibc.core.channel.v1.MsgAcknowledgement request = 1;
  StateRef base_id = 2;
}

message AcknowledgementResponse {
  ibc.core.channel.v1.MsgAcknowledgementResponse response = 1;
  bytes proof = 2;
}
