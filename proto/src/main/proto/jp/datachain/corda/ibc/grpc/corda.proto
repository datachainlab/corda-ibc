syntax = "proto3";

package jp.datachain.corda.ibc.grpc;

service NodeService {
  rpc PartiesFromName (PartiesFromNameRequest) returns (Parties);
}

service IbcService {
  rpc CreateGenesis (Participants) returns (SignedTransaction);
  rpc CreateHostAndBank (StateRef) returns (SignedTransaction);
  rpc AllocateFund (AllocateFundRequest) returns (SignedTransaction);

  rpc QueryHost (StateRef) returns (Host);
  rpc QueryBank (StateRef) returns (Bank);
}

message SecureHash {
  bytes bytes = 1;
}

message StateRef {
  SecureHash txhash = 1;
  uint32 index = 2;
}

message CordaX500Name {
  string common_name = 1; //opt
  string organisation_unit = 2; //opt
  string organisation = 3;
  string locality = 4;
  string state = 5; //opt
  string country = 6;
}

message PublicKey {
  bytes encoded = 1;
}

message Party {
  CordaX500Name name = 1;
  PublicKey owningKey = 2;
}

message PartiesFromNameRequest {
  string name = 1;
  bool exactMatch = 2;
}

message Parties {
  repeated Party parties = 1;
}

message SignatureMetadata {
  int32 platform_version = 1;
  int32 scheme_number_id = 2;
}

message TransactionSignature {
  bytes bytes = 1;
  PublicKey by = 2;
  SignatureMetadata signature_metadata = 3;
}

message SignedTransaction {
  bytes txBits = 1;
  repeated TransactionSignature sigs = 2;
}

message Host {
  message PortChannelIdentifier {
    string portId = 1;
    string channelId = 2;
  }
  repeated Party participants = 1;
  StateRef base_id = 2;
  Party notary = 3;
  repeated string client_ids = 4;
  repeated string conn_ids = 5;
  repeated PortChannelIdentifier port_chan_ids = 6;
  string id = 7;
}

message Bank {
  message BalanceMapPerDenom {
    map<string, string> pubkeyToAmount = 1;
  }

  message BalanceMap {
    map<string, BalanceMapPerDenom> denomToMap = 1;
  }

  repeated Party participants = 1;
  StateRef baseId = 2;
  BalanceMap allocated = 3;
  BalanceMap locked = 4;
  BalanceMap minted = 5;
  string id = 6;
}

message Participants {
  repeated Party participants = 1;
}

message AllocateFundRequest {
  StateRef baseId = 1;
  PublicKey owner = 2;
  string denom = 3;
  string amount = 4;
}

message ConsensusState {
  StateRef base_id = 1;
  PublicKey notary_key = 2;
}

message ClientState {}